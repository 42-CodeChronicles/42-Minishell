/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   builtins.h                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:54:55 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/22 18:37:40 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef BUILTINS_H
# define BUILTINS_H

# include <fcntl.h>
# include <readline/history.h>
# include <readline/readline.h>
# include <signal.h>
# include <stdio.h>
# include <stdlib.h>
# include <sys/wait.h>
# include <unistd.h>

typedef struct s_env
{
	char			*var;
	char			*value;
	struct s_env	*next;
}					t_env;

extern int			g_exit_status;

int					ft_pwd(void);
int					ft_env(t_env *env);
void				ft_echo(char **args);
void				ft_exit(char **args);
int					ft_cd(char **args, t_env **env);
int					ft_unset(char **args, t_env **env);
int					ft_export(char **args, t_env **env);

void				free_2d_arr(char **ptr);
int					is_valid_key(char *key);
int					ft_atoi(const char *str);
t_env				*env_to_list(char **env);
char				**list_to_env(t_env *list);
void				ft_putstr_fd(char *s, int fd);
char				*get_env_value(t_env *env, const char *key);
char				*ft_strchr(const char *string, int searchedChar);
void				update_env_var(t_env **env, const char *key,
						const char *value);
int					ft_strncmp(char *first, char *second, size_t length);

char				*get_cmd_path(char *cmd, t_env *env);
#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/10 12:13:29 by aychikhi          #+#    #+#             */
/*   Updated: 2025/06/06 21:06:12 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MINISHELL_H
# define MINISHELL_H

# include "builtins.h"
# include <limits.h>
# include <readline/history.h>
# include <readline/readline.h>
# include <stdio.h>
# include <stdlib.h>

typedef enum e_token_type
{
	TOKEN_WORD,
	TOKEN_PIPE,
	TOKEN_SPACE,
	TOKEN_APPEND,
	TOKEN_HEREDOC,
	TOKEN_REDIR_IN,
	TOKEN_REDIR_OUT,
	TOKEN_SINGLE_QUOTE,
	TOKEN_DOUBLE_QUOTE,
	TOKEN_EOF,
}					t_token_type;

typedef struct s_file
{
	char			*name;
	int				type;
	int				h_fd;
	struct s_file	*next;
}					t_file;

typedef struct s_cmd
{
	char			*cmd;
	char			**args;
	t_file			*file;
	struct s_cmd	*next;
}					t_cmd;

// typedef struct s_env
// {
// 	char			*var;
// 	char			*value;
// 	struct s_env	*next;
// }					t_env;

typedef struct s_command
{
	t_env			*env;
	t_cmd			*cmd;
}					t_command;

typedef struct s_token
{
	t_token_type	type;
	char			*value;
	struct s_token	*next;
}					t_token;

typedef struct s_tokenize_state
{
	int				*i;
	t_token			**tokens;
	t_token			**last;
}					t_tokenize_state;

typedef struct s_exp_data
{
	int				i;
	int				in_sq;
	int				in_dq;
	t_env			*env;
	char			*expanded;
	int				flag;
}					t_exp_data;

int					error_fun(void);
int					ft_isdigit(int c);
int					ft_isalpha(int c);
int					ft_isalnum(int c);
void				malloc_error(void);
t_cmd				*add_new(int size);
void				free_env(t_env *env);
void				free_cmd(t_cmd *cmd);
char				*add_word(char *str);
t_env				*env_init(char **env);
void				free_file(t_file *file);
char				*extract_var(char *var);
int					check_quotes(char *line);
char				*ft_strdup(const char *s1);
int					ft_strlen(const char *str);
void				check_unprint(char **line);
char				*extract_value(char *value);
void				free_tokens(t_token *tokens);
int					skip_fun(char *line, int flag);
int					check_tokens(t_token **tokens);
int					skip_spaces(char *input, int *i);
char				**ft_split(char const *s, char c);
int					process_exp_char(t_exp_data *data);
t_file				*add_newfile(void *name, int type);
t_env				*ft_lstnew(void *var, void *value);
char				*expand_env(char *input, t_env *env);
void				init_cmd(t_cmd **cmd, t_token *tokens);
void				check_and_join_token(t_token ***token);
void				add_backfile(t_file **lst, t_file *new);
void				ft_lstadd_back(t_env **lst, t_env *new);
char				*ft_strcpy(char *dest, const char *src);
int					ft_strcmp(const char *s1, const char *s2);
char				*add_word_inside_quote(char c, char *str);
void				handle_out_redirection(char *input, int *i,
						t_token **tokens, t_token **last);
void				add_token(t_token **tokens, t_token **last,
						t_token_type type, const char *value);
char				*ft_strjoin(char const *s1, char const *s2);
t_tokenize_state	tokenize_state_init(int *i, t_token **tokens,
						t_token **last);
char				*ft_substr(char const *s, int start, int len);
char				*ft_strncpy(char *dest, const char *src, int n);
int					check_red(char *input, t_tokenize_state *state);
int					check_pipe(char *input, t_tokenize_state *state);
void				handle_word(char *input, int *i, t_token **tokens,
						t_token **last);
void				tokeniser(char *input, t_env *env, t_command *cmd);
void				handle_quotes(char *input, int *i, t_token **tokens,
						t_token **last);
char				*extract_env(char *input, t_env *env, int dollar_pos,
						char *var_name);
char				*handle_env_expansion(char *input, int i, t_env *env);
void				handle_redirection(char *input, int *i, t_token **tokens,
						t_token **last);
void				handle_in_redirection(char *input, int *i, t_token **tokens,
						t_token **last);
void				init_command(t_command **cmd, t_token *tokens, t_env **env);

void				execute_pipeline(t_cmd *cmds, t_env *env);
int					execute_builtin(t_cmd *cmd, t_env **env);
void				exec_externals(t_cmd *cmd, t_env *env);
void				apply_redirection(t_cmd *cmd);
int					count_cmd(t_cmd *cmd);
int					is_builtin(char *cmd);
void				set_signals_interactive(void);
void				set_signals_in_child(void);
void				set_signals_heredoc(void);
void				update_exit_status(int status);
char				*ft_itoa(int n);
char				*expand_exit_status(char *input, int i);

void				close_pipes(int **pipe, int count);
int					**create_pipes(int count);
// int					handle_heredoc(t_file *file);
int					collecting_heredoc(t_cmd *cmd);

#endifCC = cc
NAME = minishell
CFLAGS = -Wall -Wextra -Werror #-fsanitize=address

SRCS = execution/main.c \
       utils/ft_strcpy.c utils/ft_strncpy.c utils/ft_substr.c \
       utils/ft_lstadd_back.c utils/add_new.c utils/add_newfile.c \
       init/init_fun.c init/init_fun1.c \
       token/helper.c token/helper1.c token/helper2.c \
       token/helper3.c token/helper4.c token/helper5.c \
       token/helper6.c token/tokeniser.c \
       parser/parser.c parser/parser1.c \
       utils/ft_strlen.c utils/ft_strdup.c utils/ft_isalnum.c \
       utils/ft_isalpha.c utils/ft_isdigit.c utils/ft_lstnew.c \
       utils/ft_strcmp.c utils/ft_strjoin.c utils/add_backfile.c \
       utils/ft_strchr.c utils/ft_putstr_fd.c utils/ft_strncmp.c \
       utils/ft_atoi.c utils/ft_split.c utils/ft_itoa.c \
       execution/builtins/ft_echo.c execution/builtins/ft_env.c \
       execution/builtins/ft_export.c execution/builtins/ft_pwd.c \
       execution/builtins/ft_unset.c execution/builtins/ft_cd.c \
       execution/builtins/ft_exit.c execution/builtins/builtins.c \
       execution/external.c execution/bibex.c execution/help.c execution/heredoc.c execution/signals.c token/helpeer.c execution/external_helper.c

OBJS = $(SRCS:.c=.o)

INCLUDES = -Iincludes

READLINE_FLAGS = -lreadline

all: $(NAME)

$(NAME): $(OBJS)
	$(CC) $(CFLAGS) $(INCLUDES) -o $(NAME) $(OBJS) $(READLINE_FLAGS)

%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   bibex.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 18:06:17 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 18:26:13 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

typedef struct s_child_ctx
{
	t_cmd	*cur;
	t_env	*env;
	int		**pipes;
	int		i;
	int		cmd_count;
}			t_child_ctx;

typedef struct s_pipes_ctx
{
	int		cmd_count;
	int		**pipes;
	pid_t	*pids;
	t_cmd	*cur;
	int		i;
}			t_pipes_ctx;

static void	free_pipes(int **pipes, int count)
{
	int	i;

	i = 0;
	while (i < count)
	{
		free(pipes[i]);
		i++;
	}
	free(pipes);
}

static void	wait_all(pid_t *pids, int count)
{
	int	i;
	int	status;

	i = 0;
	while (i < count)
	{
		waitpid(pids[i], &status, 0);
		update_exit_status(status);
		i++;
	}
}

static void	child_proc(t_child_ctx *ctx)
{
	set_signals_in_child();
	if (ctx->i != 0)
		dup2(ctx->pipes[ctx->i - 1][0], STDIN_FILENO);
	if (ctx->i != ctx->cmd_count - 1)
		dup2(ctx->pipes[ctx->i][1], STDOUT_FILENO);
	close_pipes(ctx->pipes, ctx->cmd_count - 1);
	apply_redirection(ctx->cur);
	if (is_builtin(ctx->cur->cmd))
		exit(execute_builtin(ctx->cur, &ctx->env));
	exec_externals(ctx->cur, ctx->env);
	exit(EXIT_FAILURE);
}

void	execute_pipeline(t_cmd *cmds, t_env *env)
{
	t_child_ctx	ctx;
	t_pipes_ctx	p_ctx;

	p_ctx.cmd_count = count_cmd(cmds);
	p_ctx.pipes = create_pipes(p_ctx.cmd_count - 1);
	p_ctx.pids = malloc(sizeof(pid_t) * p_ctx.cmd_count);
	p_ctx.cur = cmds;
	p_ctx.i = 0;
	while (p_ctx.cur)
	{
		ctx = (t_child_ctx){p_ctx.cur, env, p_ctx.pipes, p_ctx.i,
			p_ctx.cmd_count};
		p_ctx.pids[p_ctx.i] = fork();
		if (p_ctx.pids[p_ctx.i] == 0)
			child_proc(&ctx);
		p_ctx.cur = p_ctx.cur->next;
		p_ctx.i++;
	}
	close_pipes(p_ctx.pipes, p_ctx.cmd_count - 1);
	wait_all(p_ctx.pids, p_ctx.cmd_count);
	free_pipes(p_ctx.pipes, p_ctx.cmd_count - 1);
	free(p_ctx.pids);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   builtins.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/27 15:55:14 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 18:12:15 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

// static void	handle_builtin(char **args, t_env **env)
// {
// 	if (ft_strncmp(args[0], "echo", 5) == 0)
// 		ft_echo(args);
// 	else if (ft_strncmp(args[0], "cd", 3) == 0)
// 		ft_cd(args, env);
// 	else if (ft_strncmp(args[0], "pwd", 4) == 0)
// 		g_exit_status = ft_pwd();
// 	else if (ft_strncmp(args[0], "env", 4) == 0)
// 		g_exit_status = ft_env(*env);
// 	else if (ft_strncmp(args[0], "exit", 5) == 0)
// 		ft_exit(args);
// 	else if (ft_strncmp(args[0], "export", 7) == 0)
// 		ft_export(args, env);
// 	else if (ft_strncmp(args[0], "unset", 6) == 0)
// 		ft_unset(args, env);
// 	else
// 		fprintf(stderr, "minishell: %s: command not found\n", args[0]);
// }

// void print_args(char **args)
// {
//     for (int i = 0;args[i]; i++)
//         printf("args %d, %s\n", i+1, args[i]);
// }

static void	run_builtin(t_cmd *cmd, t_env **env)
{
	if (ft_strncmp(cmd->cmd, "echo", 5) == 0)
		ft_echo(cmd->args);
	else if (ft_strncmp(cmd->cmd, "cd", 3) == 0)
		ft_cd(cmd->args, env);
	else if (ft_strncmp(cmd->cmd, "pwd", 4) == 0)
		g_exit_status = ft_pwd();
	else if (ft_strncmp(cmd->cmd, "env", 4) == 0)
		g_exit_status = ft_env(*env);
	else if (ft_strncmp(cmd->cmd, "exit", 5) == 0)
		ft_exit(cmd->args);
	else if (ft_strncmp(cmd->cmd, "export", 7) == 0)
		ft_export(cmd->args, env);
	else if (ft_strncmp(cmd->cmd, "unset", 6) == 0)
		ft_unset(cmd->args, env);
	else
	{
		ft_putstr_fd("minishell: command not found\n", 2);
		g_exit_status = 127;
	}
}

int	execute_builtin(t_cmd *cmd, t_env **env)
{
	int	stdin_copy;
	int	stdout_copy;

	if (!cmd || !cmd->cmd)
		return (1);
	collecting_heredoc(cmd);
	stdin_copy = dup(STDIN_FILENO);
	stdout_copy = dup(STDOUT_FILENO);
	apply_redirection(cmd);
	run_builtin(cmd, env);
	dup2(stdin_copy, STDIN_FILENO);
	dup2(stdout_copy, STDOUT_FILENO);
	close(stdin_copy);
	close(stdout_copy);
	return (g_exit_status);
}
// void	helper_builtins(char *cmd, t_env **env)
// {
// 	char	**args;
// 	int		i;

// 	args = ft_split(cmd, ' ');
// 	if (!args || !args[0])
// 	{
// 		free(args);
// 		return ;
// 	}
// 	handle_builtin(args, env);
// 	i = 0;
// 	while (args[i])
// 		free(args[i++]);
// 	free(args);
// }
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_cd.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:55:57 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 18:12:33 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

static char	*cd_home_error(char *oldpwd)
{
	free(oldpwd);
	ft_putstr_fd("minishell: cd: HOME not set\n", 2);
	g_exit_status = 1;
	return (NULL);
}

static char	*cd_oldpwd_error(char *oldpwd)
{
	free(oldpwd);
	ft_putstr_fd("minishell: cd: OLDPWD not set\n", 2);
	g_exit_status = 1;
	return (NULL);
}

static char	*get_cd_path(char **args, t_env **env, char *oldpwd)
{
	char	*path;

	if (!args[1] || !ft_strcmp(args[1], "~"))
	{
		path = get_env_value(*env, "HOME");
		if (!path)
			return (cd_home_error(oldpwd));
	}
	else if (!ft_strcmp(args[1], "-"))
	{
		path = get_env_value(*env, "OLDPWD");
		if (!path)
			return (cd_oldpwd_error(oldpwd));
	}
	else
		path = args[1];
	return (path);
}

int	ft_cd(char **args, t_env **env)
{
	char	*path;
	char	*oldpwd;
	char	*newpwd;

	oldpwd = getcwd(NULL, 0);
	path = get_cd_path(args, env, oldpwd);
	if (!path)
		return (1);
	if (chdir(path) == -1)
	{
		free(oldpwd);
		ft_putstr_fd("minishell: cd: ", 2);
		ft_putstr_fd(path, 2);
		ft_putstr_fd(": No such file or directory\n", 2);
		g_exit_status = 1;
		return (1);
	}
	newpwd = getcwd(NULL, 0);
	update_env_var(env, "OLDPWD", oldpwd);
	update_env_var(env, "PWD", newpwd);
	free(oldpwd);
	free(newpwd);
	g_exit_status = 0;
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:05 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 16:16:23 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

static int	handle_n_flag(char **args, int *nl)
{
	int	i;
	int	j;

	i = 1;
	*nl = 1;
	while (args[i] && ft_strncmp(args[i], "-n", 2) == 0)
	{
		j = 2;
		while (args[i][j] && args[i][j] == 'n')
			j++;
		if (args[i][j] == '\0')
			*nl = 0;
		else
			break ;
		i++;
	}
	return (i);
}

void	ft_echo(char **args)
{
	int	i;
	int	nl;

	i = handle_n_flag(args, &nl);
	while (args[i])
	{
		printf("%s", args[i]);
		if (args[i + 1])
			printf(" ");
		i++;
	}
	if (nl)
		printf("\n");
	g_exit_status = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_env.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:03 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:31:58 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

t_env	*env_to_list(char **env)
{
	t_env	*head;
	t_env	*node;
	char	*equal;

	head = NULL;
	while (*env)
	{
		node = malloc(sizeof(t_env));
		if (!node)
			return (NULL);
		equal = ft_strchr(*env, '=');
		node->var = ft_substr(*env, 0, equal - *env);
		node->value = ft_strdup(equal + 1);
		node->next = head;
		head = node;
		env++;
	}
	return (head);
}

char	**list_to_env(t_env *list)
{
	char	**env;
	char	*entry;
	int		count;
	t_env	*tmp;

	count = 0;
	tmp = list;
	while (tmp && ++count)
		tmp = tmp->next;
	env = malloc((count + 1) * sizeof(char *));
	if (!env)
		return (NULL);
	count = 0;
	while (list)
	{
		entry = ft_strjoin(list->var, "=");
		env[count++] = ft_strjoin(entry, list->value);
		free(entry);
		list = list->next;
	}
	env[count] = NULL;
	return (env);
}

char	*get_env_value(t_env *env, const char *key)
{
	while (env)
	{
		if (ft_strcmp(env->var, key) == 0)
			return (env->value);
		env = env->next;
	}
	return (NULL);
}

void	update_env_var(t_env **env, const char *key, const char *value)
{
	t_env	*tmp;
	t_env	*new_node;

	tmp = *env;
	while (tmp)
	{
		if (ft_strcmp(tmp->var, key) == 0)
		{
			free(tmp->value);
			tmp->value = ft_strdup(value);
			return ;
		}
		tmp = tmp->next;
	}
	new_node = malloc(sizeof(t_env));
	if (!new_node)
		return ;
	new_node->var = ft_strdup(key);
	new_node->value = ft_strdup(value);
	new_node->next = *env;
	*env = new_node;
}

int	ft_env(t_env *env)
{
	if (!env)
	{
		ft_putstr_fd("env: environment is empty\n", 2);
		return (1);
	}
	while (env)
	{
		printf("%s=%s\n", env->var, env->value);
		env = env->next;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exit.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:10 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:32:33 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

int	is_num(const char *str)
{
	int	i;

	i = 0;
	if (str[i] == '-' || str[i] == '+')
		i++;
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

static int	handel_args(char **args)
{
	int	exit_code;

	if (!is_num(args[1]))
	{
		fprintf(stderr, "minishell: exit: %s: numeric argument required\n",
			args[1]);
		exit(255);
	}
	else if (args[2])
	{
		fprintf(stderr, "minishell: exit: too many arguments\n");
		g_exit_status = 1;
		return (-1);
	}
	exit_code = ft_atoi(args[1]);
	exit_code %= 256;
	return (exit_code);
}

void	ft_exit(char **args)
{
	int	exit_code;

	exit_code = 0;
	printf("exit\n");
	if (args[1])
	{
		exit_code = handel_args(args);
		if (exit_code == -1)
			return ;
	}
	else
		exit_code = g_exit_status;
	clear_history();
	exit(exit_code);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   export.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:13 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/18 16:56:14 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

static void	print_export(t_env *env)
{
	if (!env)
		return ;
	while (env)
	{
		if (env->value)
			printf("declare -x %s=\"%s\"\n", env->var, env->value);
		else
			printf("declare -x %s\n", env->var);
		env = env->next;
	}
}

int	is_valid_key(char *key)
{
	int	i;

	i = 0;
	if (!ft_isalpha(key[i]) && key[i] != '_')
		return (0);
	i++;
	while (key[i] && key[i] != '=')
	{
		if (!ft_isalnum(key[i]) && key[i] != '_')
			return (0);
		i++;
	}
	return (1);
}

static int	process_export_arg(char *arg, t_env **env)
{
	char	*eq;
	char	*key;
	char	*value;

	if (!is_valid_key(arg))
	{
		ft_putstr_fd("minishell: export: `", 2);
		ft_putstr_fd(arg, 2);
		ft_putstr_fd("': not a valid identifier\n", 2);
		return (1);
	}
	eq = ft_strchr(arg, '=');
	if (eq)
	{
		key = ft_substr(arg, 0, eq - arg);
		value = ft_strdup(eq + 1);
		update_env_var(env, key, value);
		free(key);
		free(value);
	}
	else
		update_env_var(env, arg, NULL);
	return (0);
}

int	ft_export(char **args, t_env **env)
{
	int	i;
	int	status;

	i = 1;
	status = 0;
	if (!args[1])
	{
		print_export(*env);
		return (0);
	}
	while (args[i])
	{
		if (process_export_arg(args[i], env))
			status = 1;
		i++;
	}
	g_exit_status = status;
	return (status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pwd.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:55:55 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 14:00:45 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

int	ft_pwd(void)
{
	char	*path;

	path = getcwd(NULL, 0);
	if (!path)
	{
		ft_putstr_fd("minishell: pwd: error retrieving current directory: ", 2);
		return (1);
	}
	printf("%s\n", path);
	free(path);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_unset.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:15 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/22 18:40:13 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/minishell.h"

static void	remove_env_var(t_env **env, char *key)
{
	t_env	*prev;
	t_env	*curr;

	prev = NULL;
	curr = *env;
	while (curr)
	{
		if (!ft_strcmp(curr->var, key))
		{
			if (prev)
				prev->next = curr->next;
			else
				*env = curr->next;
			free(curr->var);
			free(curr->value);
			free(curr);
			return ;
		}
		prev = curr;
		curr = curr->next;
	}
}

int	ft_unset(char **args, t_env **env)
{
	int	status;
	int	i;

	status = 0;
	i = 1;
	if (!args[1])
		return (0);
	while (args[i])
	{
		if (!is_valid_key(args[i]))
		{
			ft_putstr_fd("unset: `", 2);
			ft_putstr_fd(args[i], 2);
			ft_putstr_fd("': not a valid identifier\n", 2);
			status = 1;
		}
		else
			remove_env_var(env, args[i]);
		i++;
	}
	return (status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   external.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/22 18:39:05 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 22:14:17 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static void	handle_heredoc(t_file *f)
{
	if (f->h_fd != -1)
	{
		dup2(f->h_fd, STDIN_FILENO);
		close(f->h_fd);
	}
	else
		ft_putstr_fd("error in the heredoc\n", 2);
}

static void	handle_redir(t_file *f)
{
	int	fd;

	fd = -1;
	if (f->type == TOKEN_REDIR_IN)
		fd = open(f->name, O_RDONLY);
	else if (f->type == TOKEN_REDIR_OUT)
		fd = open(f->name, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	else if (f->type == TOKEN_APPEND)
		fd = open(f->name, O_WRONLY | O_CREAT | O_APPEND, 0644);
	else if (f->type == TOKEN_HEREDOC)
	{
		handle_heredoc(f);
		return ;
	}
	if (fd < 0)
		ft_putstr_fd("Error opening file: ", 2);
	else
	{
		if (f->type == TOKEN_REDIR_IN)
			dup2(fd, STDIN_FILENO);
		else
			dup2(fd, STDOUT_FILENO);
		close(fd);
	}
}

void	apply_redirection(t_cmd *cmd)
{
	t_file	*f;

	f = cmd->file;
	while (f)
	{
		handle_redir(f);
		f = f->next;
	}
}

static void	execute_child_process(t_cmd *cmd, char *path, char **envp)
{
	apply_redirection(cmd);
	set_signals_in_child();
	execve(path, cmd->args, envp);
	ft_putstr_fd("minishell: execve failed: ", 2);
	exit(1);
}

void	exec_externals(t_cmd *cmd, t_env *env)
{
	pid_t	pid;
	char	*path;
	char	**envp;
	int		status;

	path = get_cmd_path(cmd->cmd, env);
	if (!path)
	{
		ft_putstr_fd("minishell: command not found", 2);
		ft_putstr_fd(cmd->cmd, 2);
		ft_putstr_fd("\n", 2);
		g_exit_status = 127;
		return ;
	}
	envp = list_to_env(env);
	pid = fork();
	if (pid == 0)
		execute_child_process(cmd, path, envp);
	else
	{
		waitpid(pid, &status, 0);
		update_exit_status(status);
	}
	free(path);
	free_2d_arr(envp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   external_helper.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 21:42:59 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 21:43:00 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static char	*join_paths(char *dir, char *cmd)
{
	char	*tmp;
	char	*path;

	tmp = ft_strjoin(dir, "/");
	path = ft_strjoin(tmp, cmd);
	free(tmp);
	return (path);
}

char	*get_cmd_path(char *cmd, t_env *env)
{
	char	**path;
	char	*path_env;
	int		i;
	char	*full;

	path_env = get_env_value(env, "PATH");
	if (!path_env)
		return (NULL);
	i = 0;
	path = ft_split(path_env, ':');
	if (!path)
		return (NULL);
	while (path[i])
	{
		full = join_paths(path[i], cmd);
		if (access(full, X_OK) == 0)
		{
			free_2d_arr(path);
			return (full);
		}
		free(full);
		i++;
	}
	free_2d_arr(path);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   help.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 18:10:26 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 18:10:27 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	error_fun(void)
{
	printf("Error: Unclosed quotes!\n");
	return (0);
}

void	malloc_error(void)
{
	printf("malloc Error !\n");
	exit(EXIT_FAILURE);
}

int	count_cmd(t_cmd *cmd)
{
	int	count;

	count = 0;
	while (cmd)
	{
		count++;
		cmd = cmd->next;
	}
	return (count);
}

void	close_pipes(int **pipe, int count)
{
	int	i;

	i = 0;
	while (i < count)
	{
		close(pipe[i][0]);
		close(pipe[i][1]);
		i++;
	}
}

int	**create_pipes(int count)
{
	int	**pipe;
	int	i;

	pipe = malloc(sizeof(int *) * count);
	i = 0;
	while (i < count)
	{
		pipe[i] = malloc(sizeof(int) * 2);
		if (!pipe[i])
		{
			ft_putstr_fd("minishell: malloc: allocation error\n", 2);
			exit(EXIT_FAILURE);
		}
		i++;
	}
	return (pipe);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   heredoc.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 18:06:54 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 18:11:09 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static void	handle_heredoc_child(int pipe_fd[2], char *delimiter)
{
	char	*line;

	set_signals_heredoc();
	close(pipe_fd[0]);
	while (1)
	{
		line = readline("> ");
		if (!line || !ft_strcmp(line, delimiter))
		{
			free(line);
			break ;
		}
		write(pipe_fd[1], line, ft_strlen(line));
		write(pipe_fd[1], "\n", 1);
		free(line);
	}
	close(pipe_fd[1]);
	exit(EXIT_SUCCESS);
}

static void	handle_heredoc_parent(int pipe_fd[2], t_file *file, pid_t pid)
{
	int	status;

	close(pipe_fd[1]);
	waitpid(pid, &status, 0);
	if (WIFSIGNALED(status))
	{
		close(pipe_fd[0]);
		g_exit_status = 1;
	}
	else
		file->h_fd = pipe_fd[0];
}

static int	setup_heredoc_pipe(int pipe_fd[2])
{
	if (pipe(pipe_fd) < 0)
	{
		ft_putstr_fd("minishell: pipe error\n", 2);
		return (0);
	}
	return (1);
}

static int	process_heredoc(t_file *file)
{
	int		pipe_fd[2];
	pid_t	pid;

	if (!setup_heredoc_pipe(pipe_fd))
		return (1);
	pid = fork();
	if (pid == 0)
		handle_heredoc_child(pipe_fd, file->name);
	else
	{
		handle_heredoc_parent(pipe_fd, file, pid);
		if (g_exit_status == 1)
			return (1);
	}
	return (0);
}

int	collecting_heredoc(t_cmd *cmd)
{
	t_cmd	*cur;
	t_file	*file;

	cur = cmd;
	while (cur)
	{
		file = cur->file;
		while (file)
		{
			if (file->type == TOKEN_HEREDOC)
			{
				if (process_heredoc(file))
					return (1);
			}
			file = file->next;
		}
		cur = cur->next;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 15:37:47 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 21:42:19 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int			g_exit_status;

int	is_builtin(char *cmd)
{
	if (!cmd)
		exit(0);
	return (!ft_strcmp(cmd, "echo") || !ft_strcmp(cmd, "cd") || !ft_strcmp(cmd,
			"pwd") || !ft_strcmp(cmd, "env") || !ft_strcmp(cmd, "exit")
		|| !ft_strcmp(cmd, "export") || !ft_strcmp(cmd, "unset"));
}

static void	execute_command(t_command *cmd, t_env **env_list)
{
	if (cmd->cmd && cmd->cmd->next)
		execute_pipeline(cmd->cmd, *env_list);
	else if (cmd->cmd)
	{
		if (is_builtin(cmd->cmd->cmd))
			execute_builtin(cmd->cmd, env_list);
		else
			exec_externals(cmd->cmd, *env_list);
	}
}

static void	process_line(char *line, t_env *env_list)
{
	t_command	cmd;

	if (*line)
	{
		add_history(line);
		tokeniser(line, env_list, &cmd);
		if (cmd.cmd != NULL)
		{
			collecting_heredoc(cmd.cmd);
			execute_command(&cmd, &env_list);
		}
		if (cmd.cmd)
			free_cmd(cmd.cmd);
	}
}

int	main(int argc, char **argv, char **env)
{
	char	*line;
	t_env	*env_list;

	(void)argc;
	(void)argv;
	g_exit_status = 0;
	env_list = env_to_list(env);
	set_signals_interactive();
	while (1)
	{
		line = readline("minishell$ ");
		if (!line)
		{
			write(1, "exit\n", 5);
			exit(g_exit_status);
		}
		process_line(line, env_list);
		free(line);
	}
	clear_history();
	free_env(env_list);
	return (g_exit_status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   signals.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 18:12:01 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 21:42:47 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

extern int	g_exit_status;

void	handle_sigint(int sig)
{
	(void)sig;
	write(1, "\n", 1);
	rl_on_new_line();
	// rl_replace_line("", 0);
	rl_redisplay();
	g_exit_status = 130;
}

void	set_signals_interactive(void)
{
	signal(SIGINT, handle_sigint);
	signal(SIGQUIT, SIG_IGN);
}

void	set_signals_in_child(void)
{
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
}

void	set_signals_heredoc(void)
{
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_IGN);
}

void	update_exit_status(int status)
{
	if (WIFEXITED(status))
		g_exit_status = WEXITSTATUS(status);
	else if (WIFSIGNALED(status))
		g_exit_status = 128 + WTERMSIG(status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_fun.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 16:46:02 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 17:19:57 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_tokenize_state	tokenize_state_init(int *i, t_token **tokens,
		t_token **last)
{
	t_tokenize_state	state;

	state.i = i;
	state.tokens = tokens;
	state.last = last;
	return (state);
}

t_env	*env_init(char **env)
{
	t_env	*new_env;
	t_env	*last;
	t_env	*new_node;
	int		i;

	new_env = NULL;
	last = NULL;
	if (!env || !*env)
		return (NULL);
	new_env = ft_lstnew(extract_var(env[0]), extract_value(env[0]));
	if (!new_env)
		return (NULL);
	last = new_env;
	i = 1;
	while (env[i])
	{
		new_node = ft_lstnew(extract_var(env[i]), extract_value(env[i]));
		if (!new_node)
			return (NULL);
		ft_lstadd_back(&last, new_node);
		last = last->next;
		i++;
	}
	return (new_env);
}

void	init_command(t_command **cmd, t_token *tokens, t_env **env)
{
	if (!*cmd)
	{
		*cmd = malloc(sizeof(t_command));
		if (!*cmd)
			malloc_error();
	}
	(*cmd)->env = *env;
	init_cmd(&(*cmd)->cmd, tokens);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_fun1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/27 20:34:34 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/22 18:47:46 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	arg_size(t_token *tokens)
{
	t_token	*tmp;
	int		size;

	size = 0;
	tmp = tokens;
	while (tmp)
	{
		if (tmp->type == 1 || tmp->type == 9)
			break ;
		else if (tmp->type == 3 || tmp->type == 4 || tmp->type == 5
			|| tmp->type == 6)
			tmp = tmp->next->next->next;
		else if (tmp->type == 2)
			tmp = tmp->next;
		else
		{
			size++;
			tmp = tmp->next;
		}
	}
	return (size);
}

static void	add_file_to_cmd(t_cmd *tmp, t_token **tokens, int type, int *flag)
{
	if ((*tokens)->next->type == 1)
		*tokens = (*tokens)->next;
	while ((*tokens)->next->type == 2)
		*tokens = (*tokens)->next;
	if ((*tokens)->next && (*tokens)->next->type != 9)
	{
		if (!(*flag))
		{
			*flag = 1;
			tmp->file = add_newfile(ft_strdup((*tokens)->next->value), type);
		}
		else
			add_backfile(&tmp->file,
				add_newfile(ft_strdup((*tokens)->next->value), type));
		*tokens = (*tokens)->next->next;
	}
	else
		*tokens = (*tokens)->next;
}

static void	add_arg_to_cmd(t_cmd *tmp, t_token **tokens, int *i)
{
	if (!tmp->cmd)
	{
		tmp->cmd = ft_strdup((*tokens)->value);
	}
	if ((*tokens)->type != 2 && (*tokens)->type != 9)
	{
		tmp->args[*i] = ft_strdup((*tokens)->value);
		(*i)++;
	}
	*tokens = (*tokens)->next;
}

static void	handle_pipe(t_cmd **tmp, t_token **tokens, int *i, int *flag)
{
	*flag = 0;
	*i = 0;
	*tokens = (*tokens)->next;
	while ((*tokens)->type == 2)
		*tokens = (*tokens)->next;
	(*tmp)->next = add_new(arg_size(*tokens));
	*tmp = (*tmp)->next;
}

void	init_cmd(t_cmd **cmd, t_token *tokens)
{
	t_cmd	*tmp;
	int		i;
	int		flag;
	int		type;

	flag = 0;
	i = 0;
	type = 0;
	*cmd = add_new(arg_size(tokens));
	tmp = *cmd;
	while (tokens && tokens->type != 9)
	{
		if (tokens->type == 2)
			tokens = tokens->next;
		else if (tokens->type == 1)
			handle_pipe(&tmp, &tokens, &i, &flag);
		else if (tokens->type == 3 || tokens->type == 4 || tokens->type == 5
			|| tokens->type == 6)
		{
			type = tokens->type;
			add_file_to_cmd(tmp, &tokens, type, &flag);
		}
		else
			add_arg_to_cmd(tmp, &tokens, &i);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/10 12:09:50 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:07:11 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

// int	error_fun(void)
// {
// 	printf("Error: Unclosed quotes!\n");
// 	return (0);
// }

// void	malloc_error(void)
// {
// 	printf("malloc Error !\n");
// 	exit(EXIT_FAILURE);
// }

// int	main(int ac, char **av, char **env)
// {
// 	int			flag;
// 	char		*line;
// 	t_command	cmd;
// 	t_env		*new_env;

// 	(void)av;
// 	(void)ac;
// 	new_env = env_init(env);
// 	while (07)
// 	{
// 		line = readline("minishell :");
// 		if (!line)
// 			return (free_env(new_env), free(line), 2);
// 		check_unprint(&line);
// 		flag = check_quotes(line);
// 		if (flag)
// 			tokeniser(line, new_env, &cmd);
// 		free(line);
// 	}
// 	return (0);
// }
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 13:05:10 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/29 15:34:06 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	check_unprint(char **line)
{
	int	i;
	int	f;
	int	in_q;

	i = 0;
	f = 0;
	in_q = 0;
	while (line[0][f])
	{
		if (line[0][f] == '\'' || line[0][f] == '\"')
			in_q = !in_q;
		if (line[0][f] >= 1 && line[0][f] <= 31 && !in_q)
			f++;
		else
		{
			line[0][i] = line[0][f];
			f++;
			i++;
		}
	}
	line[0][i] = '\0';
}

// void	one_space(char **line)
// {
// 	int	i;
// 	int	f;
// 	int	flag;

// 	i = 0;
// 	f = 0;
// 	flag = 0;
// 	while (line[0][f])
// 	{
// 		while (line[0][f] == ' ')
// 		{
// 			flag = 1;
// 			f++;
// 		}
// 		if (flag)
// 		{
// 			line[0][i] = ' ';
// 			flag = 0;
// 			i++;
// 		}
// 		line[0][i] = line[0][f];
// 		f++;
// 		i++;
// 	}
// 	line[0][i] = '\0';
// }

int	skip_fun(char *line, int flag)
{
	int	i;

	i = 0;
	while (line[i])
	{
		if (flag == 1 && line[i] == '\'')
			return (i + 1);
		else if (flag == 2 && line[i] == '\"')
			return (i + 1);
		i++;
	}
	return (0);
}

int	check_quotes(char *line)
{
	int	i;
	int	j;
	int	f;

	i = 0;
	f = 0;
	while (line[i])
	{
		if ((line[i] == '\'' || line[i] == '\"') && !f)
		{
			f = 1;
			if (line[i] == '\"')
				f++;
			i++;
			j = skip_fun(line + i, f);
			if (j == 0)
				return (error_fun());
			f = 0;
			i += j;
		}
		else
			i++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser1.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 14:05:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/29 13:08:08 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	check_pipe(char *input, t_tokenize_state *state)
{
	int	i;
	int	l;

	l = 0;
	i = *state->i;
	while (input[i] == '|')
	{
		i++;
		l++;
		while (input[i] == ' ')
			i++;
	}
	if (l > 1)
		return (printf("syntax error near unexpected token `|'\n"), 0);
	while (input[i] == ' ')
		i++;
	if (l == 2 && input[i])
		return (3);
	else if (input[i])
		return (1);
	else
		return (printf("syntax error near unexpected token `|'\n"), 0);
	return (1);
}

static int	handle_redirection_chars(char *input, int *i, int *l)
{
	while (input[*i] == '>' || input[*i] == '<')
	{
		(*i)++;
		(*l)++;
		while (input[*i] == ' ')
		{
			(*i)++;
			if (input[*i] == '|')
				return (printf("syntax error near unexpected token `|'\n"), 0);
		}
		if (!input[*i])
			return (printf("syntax error\n"), 0);
		if (*l == 1 && input[*i - 1] == '>' && input[*i] == '|')
			return (1);
	}
	return (2);
}

int	check_red(char *input, t_tokenize_state *state)
{
	int	i;
	int	l;
	int	ret;

	l = 0;
	i = *state->i;
	if ((input[i] == '>' && input[i + 1] == '<') || (input[i] == '<' && input[i
				+ 1] == '>'))
		return (printf("syntax error\n"), 0);
	ret = handle_redirection_chars(input, &i, &l);
	if (ret != 2)
		return (ret);
	if (input[i] == '|')
		return (printf("syntax error near unexpected token `|'\n"), 0);
	if (l > 2)
		return (printf("syntax error\n"), 0);
	return (1);
}

void	check_and_join_token(t_token ***token)
{
	t_token	*tmp;
	t_token	*tmp2;

	tmp = **token;
	while (tmp)
	{
		if (tmp->next && tmp->type != 1 && tmp->next->type != 1
			&& tmp->next->type != 9 && tmp->type != 9 && tmp->next->type != 2
			&& tmp->type != 2 && tmp->next->type != 3 && tmp->type != 3
			&& tmp->next->type != 4 && tmp->type != 4 && tmp->next->type != 5
			&& tmp->type != 5 && tmp->next->type != 6 && tmp->type != 6)
		{
			tmp->value = ft_strjoin(tmp->value, tmp->next->value);
			tmp->type = 0;
			tmp2 = tmp->next;
			tmp->next = tmp2->next;
		}
		else
			tmp = tmp->next;
	}
}

int	check_tokens(t_token **tokens)
{
	t_token	*tmp;

	tmp = *tokens;
	if (tmp->type == 1)
		return (printf("syntax error near unexpected token `|'\n"), 0);
	while (tmp)
	{
		if ((tmp->type == 5 || tmp->type == 6 || tmp->type == 3
				|| tmp->type == 4) && tmp->next->type == 9)
			return (printf("syntax error\n"), 0);
		tmp = tmp->next;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helpeer.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/06 21:03:44 by ayaarab           #+#    #+#             */
/*   Updated: 2025/06/06 21:03:48 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*expand_exit_status(char *input, int i)
{
	char	*exit_str;
	char	*new_input;
	int		new_len;

	exit_str = ft_itoa(g_exit_status);
	new_len = ft_strlen(input) - 2 + ft_strlen(exit_str) + 1;
	new_input = malloc(new_len);
	if (!new_input)
		malloc_error();
	ft_strncpy(new_input, input, i);
	new_input[i] = '\0';
	ft_strcpy(new_input + i, exit_str);
	ft_strcpy(new_input + i + ft_strlen(exit_str), input + i + 2);
	free(exit_str);
	return (new_input);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 17:04:31 by aychikhi          #+#    #+#             */
/*   Updated: 2025/06/06 18:06:01 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	add_token(t_token **tokens, t_token **last, t_token_type type,
		const char *value)
{
	t_token	*new_token;

	new_token = malloc(sizeof(t_token));
	if (!new_token)
		malloc_error();
	new_token->type = type;
	new_token->value = ft_strdup(value);
	new_token->next = NULL;
	if (!*tokens)
	{
		*tokens = new_token;
		*last = new_token;
	}
	else
	{
		(*last)->next = new_token;
		*last = new_token;
	}
}

static int	handle_dollar(char *input)
{
	int	i;
	int	l;

	i = 0;
	l = 0;
	if (ft_isalpha(input[1]) || input[1] == '_')
	{
		i++;
		while (input[i] && (ft_isalnum(input[i]) || input[i] == '_'))
		{
			l++;
			i++;
		}
	}
	return (l);
}

char	*handle_env_expansion(char *input, int i, t_env *env)
{
	int		l;
	char	*result;
	char	*var_name;

	if (input[i + 1] == '?')
		return (expand_exit_status(input, i));
	l = handle_dollar(input + i);
	if (l > 0)
	{
		var_name = ft_substr(input, i + 1, l);
		if (!var_name)
			return (NULL);
		result = extract_env(input, env, i, var_name);
		free(var_name);
		return (result);
	}
	return (NULL);
}

static void	init_exp_data(t_exp_data *data, char *input, t_env *env)
{
	data->i = 0;
	data->in_sq = 0;
	data->in_dq = 0;
	data->env = env;
	data->flag = 0;
	data->expanded = ft_strdup(input);
}

char	*expand_env(char *input, t_env *env)
{
	t_exp_data	data;

	if (!input)
		return (NULL);
	init_exp_data(&data, input, env);
	if (!data.expanded)
		return (NULL);
	while (data.expanded[data.i])
	{
		if (process_exp_char(&data))
			continue ;
		data.i++;
	}
	return (data.expanded);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper1.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:31:53 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 17:24:52 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*extract_var(char *var)
{
	char	*new;
	int		i;
	int		l;

	i = 0;
	l = 0;
	while (var[l] != '=')
		l++;
	new = malloc(l + 1);
	if (!new)
		malloc_error();
	while (i < l)
	{
		new[i] = var[i];
		i++;
	}
	new[i] = '\0';
	return (new);
}

static int	ft_len(char *value)
{
	int	i;
	int	l;
	int	f;

	i = 0;
	l = 0;
	f = 0;
	while (value[i])
	{
		if (value[i] == '=' && !f)
		{
			i++;
			l = 0;
			f++;
		}
		l++;
		i++;
	}
	return (l);
}

static int	new_start(char *value)
{
	int	i;

	i = 0;
	while (value[i])
	{
		if (value[i] == '=')
			return (i + 1);
		i++;
	}
	return (0);
}

char	*extract_value(char *value)
{
	char	*new;
	int		i;
	int		l;

	i = 0;
	l = ft_len(value);
	new = malloc(l + 1);
	if (!new)
		malloc_error();
	i = 0;
	l = new_start(value);
	while (value[l])
	{
		new[i] = value[l];
		l++;
		i++;
	}
	new[i] = '\0';
	return (new);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper2.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/24 15:24:22 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 13:18:40 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	handle_in_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i + 1] == '<')
	{
		add_token(tokens, last, TOKEN_HEREDOC, "<<");
		*i += 2;
	}
	else
	{
		add_token(tokens, last, TOKEN_REDIR_IN, "<");
		(*i)++;
	}
}

void	handle_out_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i + 1] == '>')
	{
		add_token(tokens, last, TOKEN_APPEND, ">>");
		*i += 2;
	}
	else
	{
		add_token(tokens, last, TOKEN_REDIR_OUT, ">");
		(*i)++;
	}
}

void	handle_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i] == '<')
		handle_in_redirection(input, i, tokens, last);
	else if (input[*i] == '>')
		handle_out_redirection(input, i, tokens, last);
}

void	handle_quotes(char *input, int *i, t_token **tokens, t_token **last)
{
	char	*word;

	if (input[*i] == '\'')
	{
		word = add_word_inside_quote(input[*i], input + (*i + 1));
		add_token(tokens, last, TOKEN_SINGLE_QUOTE, word);
		*i += ft_strlen(word) + 2;
		free(word);
	}
	else if (input[*i] == '\"')
	{
		word = add_word_inside_quote(input[*i], input + (*i + 1));
		add_token(tokens, last, TOKEN_DOUBLE_QUOTE, word);
		*i += ft_strlen(word) + 2;
		free(word);
	}
}

void	handle_word(char *input, int *i, t_token **tokens, t_token **last)
{
	char	*word;

	word = add_word(input + *i);
	add_token(tokens, last, TOKEN_WORD, word);
	*i += ft_strlen(word);
	free(word);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper3.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 12:11:41 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 15:33:29 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static char	*create_expanded_str(char *input, char *env_value, int dollar_pos,
		int var_len)
{
	int		value_len;
	char	*new_input;

	value_len = 0;
	if (env_value)
		value_len = ft_strlen(env_value);
	new_input = malloc(ft_strlen(input) - (var_len + 1) + value_len + 1);
	if (!new_input)
		malloc_error();
	ft_strncpy(new_input, input, dollar_pos);
	new_input[dollar_pos] = '\0';
	if (env_value)
		ft_strcpy(new_input + dollar_pos, env_value);
	ft_strcpy(new_input + dollar_pos + value_len, input + dollar_pos + var_len
		+ 1);
	return (new_input);
}

char	*extract_env(char *input, t_env *env, int dollar_pos, char *var_name)
{
	t_env	*tmp;
	char	*env_value;
	int		var_len;

	tmp = env;
	var_len = ft_strlen(var_name);
	env_value = NULL;
	while (tmp)
	{
		if (!ft_strcmp(tmp->var, var_name))
		{
			env_value = tmp->value;
			break ;
		}
		tmp = tmp->next;
	}
	return (create_expanded_str(input, env_value, dollar_pos, var_len));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper4.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 14:23:07 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/26 19:53:01 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	skip_spaces(char *input, int *i)
{
	int	l;

	l = *i;
	while (input[l] && input[l] == ' ')
		l++;
	return (l);
}

char	*add_word(char *str)
{
	int		i;
	int		l;
	char	*ptr;

	i = 0;
	l = 0;
	while (str[l] && str[l] != '\'' && str[l] != '\"' && str[l] != ' '
		&& str[l] != '<' && str[l] != '>' && str[l] != '|')
		l++;
	ptr = malloc(l + 1);
	if (!ptr)
		malloc_error();
	while (i < l)
	{
		ptr[i] = str[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}

char	*add_word_inside_quote(char c, char *str)
{
	int		l;
	int		i;
	char	*ptr;

	i = 0;
	l = 0;
	while (str[l] && str[l] != c)
		l++;
	ptr = malloc(l + 1);
	if (!ptr)
		malloc_error();
	while (i < l)
	{
		ptr[i] = str[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper5.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 17:20:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 17:25:00 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	free_tokens(t_token *tokens)
{
	t_token	*tmp;

	while (tokens)
	{
		tmp = tokens;
		tokens = tokens->next;
		free(tmp->value);
		free(tmp);
	}
}

void	free_file(t_file *file)
{
	t_file	*tmp;

	while (file)
	{
		tmp = file;
		file = file->next;
		free(tmp->name);
		free(tmp);
	}
}

void	free_env(t_env *env)
{
	t_env	*tmp;

	while (env)
	{
		tmp = env;
		env = env->next;
		free(tmp->var);
		free(tmp->value);
		free(tmp);
	}
}

void	free_cmd(t_cmd *cmd)
{
	t_cmd	*tmp;
	int		i;

	i = 0;
	while (cmd)
	{
		i = 0;
		tmp = cmd;
		cmd = cmd->next;
		while (tmp->args[i])
		{
			free(tmp->args[i]);
			i++;
		}
		free(tmp->args);
		free(tmp->cmd);
		free_file(tmp->file);
		free(tmp);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper6.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 16:33:04 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/01 19:21:02 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	handle_redirections(t_exp_data *data)
{
	if (data->expanded[data->i] == '<' && data->expanded[data->i + 1] == '<')
	{
		data->i++;
		data->flag = 1;
		if (data->expanded[data->i + 1])
		{
			data->i++;
			while (data->expanded[data->i] == ' ')
				data->i++;
		}
		return (1);
	}
	return (0);
}

static int	handle_quote(t_exp_data *data)
{
	if (data->expanded[data->i] == '\'' && !data->in_dq)
	{
		data->in_sq = !data->in_sq;
		return (1);
	}
	else if (data->expanded[data->i] == '\"' && !data->in_sq)
	{
		data->in_dq = !data->in_dq;
		return (1);
	}
	return (0);
}

int	process_exp_char(t_exp_data *data)
{
	char	*temp;

	if (handle_redirections(data))
		return (0);
	else if (handle_quote(data))
		return (0);
	else if (data->expanded[data->i] == '$' && !data->in_sq && !data->flag)
	{
		temp = handle_env_expansion(data->expanded, data->i, data->env);
		if (temp)
		{
			free(data->expanded);
			data->expanded = temp;
			data->i = 0;
			if (data->in_dq)
				data->in_dq = !data->in_dq;
			return (1);
		}
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tokeniser.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 16:03:38 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:03:00 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	handle_token(char c, char *input, t_tokenize_state *state)
{
	if (c == ' ')
	{
		add_token(state->tokens, state->last, TOKEN_SPACE, " ");
		(*state->i) = skip_spaces(input, state->i);
	}
	else if (c == '|')
	{
		if (!check_pipe(input, state))
			return (0);
		else if (check_pipe(input, state) == 3)
			(*state->i)++;
		add_token(state->tokens, state->last, TOKEN_PIPE, "|");
		(*state->i)++;
	}
	else if (c == '<' || c == '>')
	{
		if (!check_red(input, state))
			return (0);
		handle_redirection(input, state->i, state->tokens, state->last);
	}
	else if (c == '\'' || c == '\"')
		handle_quotes(input, state->i, state->tokens, state->last);
	else
		handle_word(input, state->i, state->tokens, state->last);
	return (1);
}

static int	process_tokens(char *input, t_tokenize_state *state)
{
	while (input[*state->i])
	{
		if (!handle_token(input[*state->i], input, state))
			return (0);
	}
	return (1);
}

static void	finalize_tokens(t_token **tokens, t_token **last)
{
	add_token(tokens, last, TOKEN_EOF, "EOF");
	if (!check_tokens(tokens))
	{
		free_tokens(*tokens);
		*tokens = NULL;
		return ;
	}
	check_and_join_token(&tokens);
}
// static void	print_command(t_command *cmd)
// {
// 	t_command	*tmp;
// 	int			i;

// 	i = 0;
// 	tmp = cmd;
// 	while (tmp->cmd)
// 	{
// 		i = 0;
// 		printf("cmd : %s\n", tmp->cmd->cmd);
// 		printf("args : ");
// 		while (tmp->cmd->args[i])
// 		{
// 			printf("[%s] ", tmp->cmd->args[i]);
// 			i++;
// 		}
// 		printf("\n");
// 		if (tmp->cmd->file)
// 		{
// 			while (tmp->cmd->file)
// 			{
// 				printf("file : %s type : %d\n", tmp->cmd->file->name,
// 					tmp->cmd->file->type);
// 				tmp->cmd->file = tmp->cmd->file->next;
// 			}
// 		}
// 		tmp->cmd = tmp->cmd->next;
// 	}
// }

void	tokeniser(char *input, t_env *env, t_command *cmd)
{
	int					i;
	t_token				*tokens;
	t_token				*last;
	t_tokenize_state	state;
	char				*new_input;

	i = 0;
	new_input = expand_env(input, env);
	last = NULL;
	tokens = NULL;
	state = tokenize_state_init(&i, &tokens, &last);
	if (!new_input)
		return ;
	if (!process_tokens(new_input, &state))
	{
		free_tokens(tokens);
		free(new_input);
		return ;
	}
	finalize_tokens(&tokens, &last);
	init_command(&cmd, tokens, &env);
	free_tokens(tokens);
	free(new_input);
}
	// print_command(cmd);
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_backfile.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 14:33:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/29 14:35:12 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static t_file	*ft_lstlast(t_file *lst)
{
	t_file	*current;

	if (!lst)
		return (NULL);
	current = lst;
	while (current->next != NULL)
	{
		current = current->next;
	}
	return (current);
}

void	add_backfile(t_file **lst, t_file *new)
{
	t_file	*last;

	if (!lst || !new)
		return ;
	if (!*lst)
	{
		(*lst) = new;
		return ;
	}
	last = ft_lstlast(*lst);
	last->next = new;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_new.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 11:28:24 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 15:51:58 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_cmd	*add_new(int size)
{
	t_cmd	*tmp;

	tmp = malloc(sizeof(t_cmd));
	if (!tmp)
		malloc_error();
	tmp->args = calloc(size + 1, sizeof(char *));
	if (!tmp->args)
		malloc_error();
	tmp->next = NULL;
	tmp->cmd = NULL;
	tmp->file = NULL;
	return (tmp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_newfile.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 11:29:04 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 11:32:55 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_file	*add_newfile(void *name, int type)
{
	t_file	*tmp;

	tmp = malloc(sizeof(t_file));
	if (!tmp)
		malloc_error();
	tmp->name = name;
	tmp->type = type;
	tmp->next = NULL;
	tmp->h_fd = -1;
	return (tmp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/25 11:09:36 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/22 18:39:59 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_atoi(const char *str)
{
	size_t				i;
	int					sign;
	unsigned long long	result;

	i = 0;
	sign = 1;
	result = 0;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		result = (result * 10) + (str[i] - '0');
		if (result > LLONG_MAX && sign == 1)
			return (-1);
		if (result > LLONG_MAX && sign == -1)
			return (0);
		i++;
	}
	return (sign * result);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 19:58:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 20:42:16 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_isalnum(int c)
{
	if ((ft_isalpha(c)) || ft_isdigit(c))
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 20:01:12 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 20:42:23 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 20:02:01 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:31:55 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 20:16:43 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 20:42:27 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	ft_len(int n)
{
	int	i;

	i = 0;
	if (n < 0)
	{
		i += 1;
		n *= -1;
	}
	while (n > 0)
	{
		n /= 10;
		i++;
	}
	return (i);
}

char	*ft_itoa(int n)
{
	char	*str;
	int		len;
	int		i;

	if (n == -2147483648)
		return (ft_strdup("-2147483648"));
	if (n == 0)
		return (ft_strdup("0"));
	len = ft_len(n);
	i = len;
	str = malloc((len + 1) * sizeof(char));
	if (!str)
		return (NULL);
	if (n < 0)
	{
		n *= -1;
		str[0] = '-';
	}
	while (n > 0)
	{
		str[i - 1] = (n % 10) + 48;
		n /= 10;
		i--;
	}
	return (str[len] = '\0', str);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:21:09 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/23 12:22:35 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static t_env	*ft_lstlast(t_env *lst)
{
	t_env	*current;

	if (!lst)
		return (NULL);
	current = lst;
	while (current->next != NULL)
	{
		current = current->next;
	}
	return (current);
}

void	ft_lstadd_back(t_env **lst, t_env *new)
{
	t_env	*last;

	if (!lst || !new)
		return ;
	if (!*lst)
	{
		(*lst) = new;
		return ;
	}
	last = ft_lstlast(*lst);
	last->next = new;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:17:24 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/23 12:19:50 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_env	*ft_lstnew(void *var, void *value)
{
	t_env	*ptr;

	ptr = malloc(sizeof(t_env));
	if (!ptr)
		malloc_error();
	ptr->var = var;
	ptr->value = value;
	ptr->next = NULL;
	return (ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/26 16:07:38 by ayaarab           #+#    #+#             */
/*   Updated: 2024/11/04 12:46:27 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	ft_putstr_fd(char *s, int fd)
{
	size_t	i;

	i = 0;
	if (!s)
		return ;
	while (s[i])
		write(fd, &s[i++], 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/10 12:16:39 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/22 18:39:51 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	count_word(const char *str, char c)
{
	int	i;
	int	res;

	i = 0;
	res = 0;
	while (str && str[i])
	{
		while (str[i] == c)
			i++;
		if (str[i])
			res++;
		while (str[i] && str[i] != c)
			i++;
	}
	return (res);
}

static int	len(const char *str, char c, int i)
{
	int	j;

	j = 0;
	while (str[i] && str[i] != c)
	{
		j++;
		i++;
	}
	return (j);
}

void	free_2d_arr(char **ptr)
{
	int	i;

	if (!ptr)
		return ;
	i = 0;
	while (ptr[i])
		free(ptr[i++]);
	free(ptr);
}

char	**ft_split(char const *s, char c)
{
	char	**ptr;
	int		l;
	int		i;
	int		j;

	i = 0;
	l = 0;
	j = 0;
	if (!s)
		return (NULL);
	ptr = malloc((count_word(s, c) + 1) * sizeof(char *));
	if (!ptr)
		return (NULL);
	while (ptr && i < count_word(s, c))
	{
		j += l;
		while (s[j] == c)
			j++;
		l = len(s, c, j);
		ptr[i] = malloc((l + 1) * sizeof(char));
		if (!ptr[i])
			return (free_2d_arr(ptr), free(ptr), NULL);
		ft_strncpy(ptr[i++], s + j, l);
	}
	return (ptr[i] = NULL, ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/23 21:03:43 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/22 18:40:04 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strchr(const char *string, int searchedChar)
{
	while (*string)
	{
		if (*string == (char)searchedChar)
			return ((char *)string);
		string++;
	}
	if (*string == (char)searchedChar)
		return ((char *)string);
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 13:00:34 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 13:01:09 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_strcmp(const char *s1, const char *s2)
{
	size_t			i;
	unsigned char	*str1;
	unsigned char	*str2;

	str1 = (unsigned char *)s1;
	str2 = (unsigned char *)s2;
	i = 0;
	while (str1[i] || str2[i])
	{
		if (str1[i] < str2[i])
			return (-1);
		else if (str1[i] > str2[i])
			return (1);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 13:05:45 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 13:20:54 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strcpy(char *dest, const char *src)
{
	int	i;

	i = 0;
	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 17:15:13 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/22 18:39:40 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strdup(const char *s1)
{
	int		i;
	int		l;
	char	*ptr;

	i = 0;
	if (!s1)
		return (NULL);
	l = ft_strlen(s1);
	ptr = malloc((l + 1) * sizeof(char));
	if (!ptr)
		return (NULL);
	i = 0;
	while (s1[i])
	{
		ptr[i] = s1[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 17:42:54 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/27 17:46:54 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static char	*ft_strcat(char *str, char const *s2, size_t start, size_t l)
{
	size_t	i;

	i = 0;
	while (l > start)
	{
		str[start] = s2[i];
		i++;
		start++;
	}
	str[start] = '\0';
	return (str);
}

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*str;
	int		l;
	int		i;

	if (!s1 || !s2)
		return (NULL);
	l = ft_strlen(s1) + ft_strlen(s2);
	str = malloc((l + 1) * sizeof(char));
	if (!str)
		return (NULL);
	i = 0;
	while (i < ft_strlen(s1))
	{
		str[i] = s1[i];
		i++;
	}
	return (ft_strcat(str, s2, i, l));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/12 12:30:44 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:07:57 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_strlen(const char	*str)
{
	int	i;

	i = 0;
	while (str && str[i])
		i++;
	return (i);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/25 09:40:06 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/22 18:39:35 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_strncmp(char *first, char *second, size_t length)
{
	size_t	i;

	i = 0;
	if (length == 0)
		return (0);
	while (i < length && (first[i] != '\0' || second[i] != '\0'))
	{
		if ((unsigned char)first[i] != (unsigned char)second[i])
			return ((unsigned char)first[i] - (unsigned char)second[i]);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 15:33:34 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 15:33:50 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strncpy(char *dest, const char *src, int n)
{
	int	i;

	i = 0;
	while (src[i] && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 12:06:11 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 12:10:33 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_substr(char const *s, int start, int len)
{
	char	*str;
	int		i;

	if (!s)
		return (NULL);
	if (start > ft_strlen(s))
		return (ft_strdup(""));
	if (ft_strlen(s) - start < len)
		len = ft_strlen(s) - start;
	str = malloc((len + 1) * sizeof(char));
	if (!str)
		return (NULL);
	i = 0;
	while (i < len)
	{
		str[i] = s[start];
		start++;
		i++;
	}
	str[len] = '\0';
	return (str);
}
