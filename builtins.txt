/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   builtins.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/27 15:55:14 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 16:45:38 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

static void	handle_builtin(char **args, t_env **env)
{
	if (ft_strncmp(args[0], "echo", 5) == 0)
		ft_echo(args);
	else if (ft_strncmp(args[0], "cd", 3) == 0)
		ft_cd(args, env);
	else if (ft_strncmp(args[0], "pwd", 4) == 0)
		g_exit_status = ft_pwd();
	else if (ft_strncmp(args[0], "env", 4) == 0)
		g_exit_status = ft_env(*env);
	else if (ft_strncmp(args[0], "exit", 5) == 0)
		ft_exit(args);
	else if (ft_strncmp(args[0], "export", 7) == 0)
		ft_export(args, env);
	else if (ft_strncmp(args[0], "unset", 6) == 0)
		ft_unset(args, env);
	else
		fprintf(stderr, "minishell: %s: command not found\n", args[0]);
}

void	helper_builtins(char *cmd, t_env **env)
{
	char	**args;
	int		i;

	args = ft_split(cmd, ' ');
	if (!args || !args[0])
	{
		free(args);
		return ;
	}
	handle_builtin(args, env);
	i = 0;
	while (args[i])
		free(args[i++]);
	free(args);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   builtins.h                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:54:55 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:31:08 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef BUILTINS_H
# define BUILTINS_H

# include "../execution.h"

typedef struct s_env
{
	char			*key;
	char			*value;
	struct s_env	*next;
}					t_env;

extern int			g_exit_status;

int					ft_pwd(void);
int					ft_env(t_env *env);
int					ft_cd(char **args, t_env **env);
int					ft_unset(char **args, t_env **env);
int					ft_export(char **args, t_env **env);
void				ft_echo(char **args);
void				ft_exit(char **args);

//env
t_env				*env_to_list(char **env);
char				**list_to_env(t_env *list);
// int is_valid_key(char *key);
char				*get_env_value(t_env *env, const char *key);
void				update_env_var(t_env **env, const char *key,
						const char *value);
void				helper_builtins(char *cmd, t_env **env);
int					is_valid_key(char *key);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_cd.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:55:57 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:31:53 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

int	ft_cd(char **args, t_env **env)
{
	char	*path;
	char	*oldpwd;
	char	*newpwd;
	int		ret;

	oldpwd = getcwd(NULL, 0);
	if (!args[1] || !ft_strcmp(args[1], "~"))
		path = get_env_value(*env, "HOME");
	else if (!ft_strcmp(args[1], "-"))
		path = get_env_value(*env, "OLDPWD");
	else
		path = args[1];
	if (!path || chdir(path) == -1)
	{
		free(oldpwd);
		ft_putstr_fd("minishell: cd: ", 2);
		perror(path ? path : "HOME not set");
		return (1);
	}
	newpwd = getcwd(NULL, 0);
	update_env_var(env, "OLDPWD", oldpwd);
	update_env_var(env, "PWD", newpwd);
	free(oldpwd);
	free(newpwd);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:05 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 16:16:23 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

static int	handle_n_flag(char **args, int *nl)
{
	int	i;
	int	j;

	i = 1;
	*nl = 1;
	while (args[i] && ft_strncmp(args[i], "-n", 2) == 0)
	{
		j = 2;
		while (args[i][j] && args[i][j] == 'n')
			j++;
		if (args[i][j] == '\0')
			*nl = 0;
		else
			break ;
		i++;
	}
	return (i);
}

void	ft_echo(char **args)
{
	int	i;
	int	nl;

	i = handle_n_flag(args, &nl);
	while (args[i])
	{
		printf("%s", args[i]);
		if (args[i + 1])
			printf(" ");
		i++;
	}
	if (nl)
		printf("\n");
	g_exit_status = 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_env.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:03 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:31:58 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

t_env	*env_to_list(char **env)
{
	t_env	*head;
	t_env	*node;
	char	*equal;

	head = NULL;
	while (*env)
	{
		node = malloc(sizeof(t_env));
		if (!node)
			return (NULL);
		equal = ft_strchr(*env, '=');
		node->key = ft_substr(*env, 0, equal - *env);
		node->value = ft_strdup(equal + 1);
		node->next = head;
		head = node;
		env++;
	}
	return (head);
}

char	**list_to_env(t_env *list)
{
	char	**env;
	char	*entry;
	int		count;
	t_env	*tmp;

	count = 0;
	tmp = list;
	while (tmp && ++count)
		tmp = tmp->next;
	env = malloc((count + 1) * sizeof(char *));
	if (!env)
		return (NULL);
	count = 0;
	while (list)
	{
		entry = ft_strjoin(list->key, "=");
		env[count++] = ft_strjoin(entry, list->value);
		free(entry);
		list = list->next;
	}
	env[count] = NULL;
	return (env);
}

char	*get_env_value(t_env *env, const char *key)
{
	while (env)
	{
		if (ft_strcmp(env->key, key) == 0)
			return (env->value);
		env = env->next;
	}
	return (NULL);
}

void	update_env_var(t_env **env, const char *key, const char *value)
{
	t_env	*tmp;
	t_env	*new_node;

	tmp = *env;
	while (tmp)
	{
		if (ft_strcmp(tmp->key, key) == 0)
		{
			free(tmp->value);
			tmp->value = ft_strdup(value);
			return ;
		}
		tmp = tmp->next;
	}
	new_node = malloc(sizeof(t_env));
	if (!new_node)
		return ;
	new_node->key = ft_strdup(key);
	new_node->value = ft_strdup(value);
	new_node->next = *env;
	*env = new_node;
}

int	ft_env(t_env *env)
{
	if (!env)
	{
		ft_putstr_fd("env: environment is empty\n", 2);
		return (1);
	}
	while (env)
	{
		printf("%s=%s\n", env->key, env->value);
		env = env->next;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exit.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:10 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:32:33 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

int	is_num(const char *str)
{
	int	i;

	i = 0;
	if (str[i] == '-' || str[i] == '+')
		i++;
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

static int	handel_args(char **args)
{
	int	exit_code;

	if (!is_num(args[1]))
	{
		fprintf(stderr, "minishell: exit: %s: numeric argument required\n",
			args[1]);
		exit(255);
	}
	else if (args[2])
	{
		fprintf(stderr, "minishell: exit: too many arguments\n");
		g_exit_status = 1;
		return (-1);
	}
	exit_code = ft_atoi(args[1]);
	exit_code %= 256;
	return (exit_code);
}

void	ft_exit(char **args)
{
	int	exit_code;

	exit_code = 0;
	printf("exit\n");
	if (args[1])
	{
		exit_code = handel_args(args);
		if (exit_code == -1)
			return ;
	}
	else
		exit_code = g_exit_status;
	clear_history();
	exit(exit_code);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   export.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:13 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/18 16:56:14 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

static void	print_export(t_env *env)
{
	if(!env)
		return ;
	while (env)
	{
		if (env->value)
			printf("declare -x %s=\"%s\"\n", env->key, env->value);
		else
			printf("declare -x %s\n", env->key);
		env = env->next;
	}
}
int check_len(char *arg)
{
	int i = 0;
	while (arg[i])
	{
		if (arg[i] == '=')
			return (i);
		i++;
	}
	return (i);
}

static int	process_export_arg(char *arg, t_env **env)
{
	char	*eq;
	char	*key;
	char	*value;

	eq = ft_strchr(arg, '=');
	if (!is_valid_key(arg) )
	{
		ft_putstr_fd("export: `", 2);
		ft_putstr_fd(arg, 2);
		ft_putstr_fd("': not a valid identifier\n", 2);
		return (1);
	}
	if (eq)
	{
		key = ft_substr(arg, 0, eq - arg);
		value = ft_strdup(eq + 1);
		update_env_var(env, key, value);
		free(key);
		free(value);
	}
	else
		update_env_var(env, arg, NULL);
	return (0);
}

int	ft_export(char **args, t_env **env)
{
    int	status = 0;
    int	i = 1;

    if (!args || !args[1])
        return (print_export(*env), 0);
    while (args[i])
        status |= process_export_arg(args[i++], env);
    return (status);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pwd.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:55:55 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 14:00:45 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

int	ft_pwd(void)
{
	char	*path;

	path = getcwd(NULL, 0);
	if (!path)
	{
		perror("minishell: pwd");
		return (1);
	}
	printf("%s\n", path);
	free(path);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_unset.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 16:56:15 by ayaarab           #+#    #+#             */
/*   Updated: 2025/05/08 15:34:59 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../includes/builtins.h"

int	is_valid_key(char *key)
{
	
	if (!ft_isalpha(key[0]) && key[0] != '_')
		return (0);
	while (*key)
	{
		if (!ft_isalnum(*key) && *key != '_')
			return (0);
		key++;
	}
	return (1);
}

static void	remove_env_var(t_env **env, char *key)
{
	t_env	*prev = NULL;
	t_env	*curr = *env;

	while (curr)
	{
		if (!ft_strcmp(curr->key, key))
		{
			if (prev)
				prev->next = curr->next;
			else
				*env = curr->next;
			free(curr->key);
			free(curr->value);
			free(curr);
			return ;
		}
		prev = curr;
		curr = curr->next;
	}
}

int	ft_unset(char **args, t_env **env)
{
	int	status = 0;
	int	i = 1;

	if (!args[1])
		return (0);
	while (args[i])
	{
		if (!is_valid_key(args[i]))
		{
			ft_putstr_fd("unset: `", 2);
			ft_putstr_fd(args[i], 2);
			ft_putstr_fd("': not a valid identifier\n", 2);
			status = 1;
		}
		else
			remove_env_var(env, args[i]);
		i++;
	}
	return (status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execution.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 15:50:39 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 14:02:43 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef EXECUTION_H
# define EXECUTION_H

# include <readline/history.h>
# include <readline/readline.h>
# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include "Libft/libft.h"
# include "builtins/builtins.h"

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayaarab <ayaarab@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 15:37:47 by ayaarab           #+#    #+#             */
/*   Updated: 2025/04/27 16:29:24 by ayaarab          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "execution.h"

int	g_exit_status;

int	main(int argc, char **argv, char **env)
{
	char	*line;
	t_env	*env_list;

	(void)argc;
	(void)argv;
	g_exit_status = 0;
	env_list = env_to_list(env);
	while (1)
	{
		line = readline("minishell$ ");
		if (!line)
		{
			printf("exit\n");
			break ;
		}
		if (*line)
		{
			add_history(line);
			helper_builtins(line, &env_list);
		}
		free(line);
	}
	clear_history();
	return (g_exit_status);
}
CC = cc
NAME = minishell
FLAGS = -Wall -Wextra -Werror

SRCS = main.c \
       builtins/ft_echo.c \
       builtins/ft_env.c \
       builtins/ft_export.c \
       builtins/ft_pwd.c \
       builtins/ft_unset.c \
       builtins/ft_cd.c \
       builtins/ft_exit.c \
	   builtins/builtins.c \

OBJ = $(SRCS:.c=.o)

LIBFT_DIR = ./Libft
READLINE_DIR = ../libraries/readline

LIBFT = $(LIBFT_DIR)/libft.a

#LINUX FLAGS 
READLINE_FLAGS = -lreadline -L/usr/lib -I/usr/include

CYAN = \033[1;36m
GREEN = \033[1;32m
YELLOW = \033[1;33m
RED = \033[1;31m
BLUE = \033[1;34m
RESET = \033[0m


TOTAL_SRCS = $(words $(SRCS))

all: $(NAME)
	@echo "$(GREEN)🎉 Build complete! $(NAME) is ready to shine! ✨$(RESET)"

$(LIBFT):
	@make -C $(LIBFT_DIR) --no-print-directory
	@echo "$(GREEN)✅ Libft built successfully!$(RESET)"

$(NAME): $(OBJ) $(LIBFT)
	@echo "$(BLUE)🔨 Linking $(NAME)...$(RESET)"
	@$(CC) $(FLAGS) $(OBJ) $(LIBFT) $(READLINE_FLAGS) -o $(NAME)
	@echo "$(GREEN)🚀 $(NAME) created! Ready to launch!$(RESET)"


COUNT = 0
%.o: %.c
	$(eval COUNT=$(shell expr $(COUNT) + 1))
	@printf "\r$(YELLOW)🔍 Compiling sources... [$(COUNT)/$(TOTAL_SRCS)]$(RESET)"
	@$(CC) $(FLAGS) -c $< -o $@
	@if [ $(COUNT) -eq $(TOTAL_SRCS) ]; then \
		echo "\n$(GREEN)✅ Compilation complete!$(RESET)"; \
	fi

clean:
	@rm -f $(OBJ)
	@make -C $(LIBFT_DIR) clean --no-print-directory
	@echo "$(GREEN)Object files cleaned!$(RESET)"

fclean: clean
	@rm -f $(NAME)
	@make -C $(LIBFT_DIR) fclean --no-print-directory
	@echo "$(GREEN)Full clean complete!$(RESET)"

re: fclean all
	@echo "$(CYAN)🔄 Rebuild complete! Fresh start!$(RESET)"

.PHONY: all clean fclean re

love:
	@echo "$(GREEN)💖 Made with love for minishell enthusiasts! 💖$(RESET)"

ballas:
	@echo "$(BLUE)💎 Ballas! GANG  💎$(RESET)"
