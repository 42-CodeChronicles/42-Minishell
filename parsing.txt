/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   checker_fun.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 13:05:10 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/24 15:00:39 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	check_unprint(char **line)
{
	int	i;
	int	f;

	i = 0;
	f = 0;
	while (line[0][f])
	{
		if (line[0][f] >= 1 && line[0][f] <= 31)
			f++;
		else
		{
			line[0][i] = line[0][f];
			f++;
			i++;
		}
	}
	line[0][i] = '\0';
}

int	skip_fun(char *line, int flag)
{
	int	i;

	i = 0;
	while (line[i])
	{
		if (flag == 1 && line[i] == '\'')
			return (i + 1);
		else if (flag == 2 && line[i] == '\"')
			return (i + 1);
		i++;
	}
	return (0);
}

int	check_quotes(char *line)
{
	int	i;
	int	j;
	int	f;

	i = 0;
	f = 0;
	while (line[i])
	{
		if ((line[i] == '\'' || line[i] == '\"') && !f)
		{
			f = 1;
			if (line[i] == '\"')
				f++;
			i++;
			j = skip_fun(line + i, f);
			if (j == 0)
				return (error_fun());
			f = 0;
			i += j;
		}
		else
			i++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper1.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:31:53 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/24 15:03:54 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	free_tokens(t_token *tokens)
{
	t_token	*tmp;

	while (tokens)
	{
		tmp = tokens;
		tokens = tokens->next;
		free(tmp->value);
		free(tmp);
	}
}

char	*extract_var(char *var)
{
	char	*new;
	int		i;
	int		l;

	i = 0;
	l = 0;
	while (var[l] != '=')
		l++;
	new = malloc(l + 1);
	if (!new)
		malloc_error();
	while (i < l)
	{
		new[i] = var[i];
		i++;
	}
	new[i] = '\0';
	return (new);
}

static int	ft_len(char *value)
{
	int	i;
	int	l;
	int	f;

	i = 0;
	l = 0;
	f = 0;
	while (value[i])
	{
		if (value[i] == '=' && !f)
		{
			i++;
			l = 0;
			f++;
		}
		l++;
		i++;
	}
	return (l);
}

static int	new_start(char *value)
{
	int	i;

	i = 0;
	while (value[i])
	{
		if (value[i] == '=')
			return (i + 1);
		i++;
	}
	return (0);
}

char	*extract_value(char *value)
{
	char	*new;
	int		i;
	int		l;

	i = 0;
	l = ft_len(value);
	new = malloc(l + 1);
	if (!new)
		malloc_error();
	i = 0;
	l = new_start(value);
	while (value[l])
	{
		new[i] = value[l];
		l++;
		i++;
	}
	new[i] = '\0';
	return (new);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper2.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/24 15:24:22 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/24 15:28:53 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	handle_in_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i + 1] == '<')
	{
		add_token(tokens, last, TOKEN_HEREDOC, "<<");
		*i += 2;
	}
	else
	{
		add_token(tokens, last, TOKEN_REDIR_IN, "<");
		(*i)++;
	}
}

void	handle_out_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i + 1] == '>')
	{
		add_token(tokens, last, TOKEN_APPEND, ">>");
		*i += 2;
	}
	else
	{
		add_token(tokens, last, TOKEN_REDIR_OUT, ">");
		(*i)++;
	}
}

void	handle_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i] == '<')
		handle_in_redirection(input, i, tokens, last);
	else if (input[*i] == '>')
		handle_out_redirection(input, i, tokens, last);
}

void	handle_quotes(char *input, int *i, t_token **tokens, t_token **last)
{
	char	*word;

	if (input[*i] == '\'')
	{
		word = add_word_inside_quote(input[*i], input + (*i + 1));
		add_token(tokens, last, TOKEN_SINGLE_QUOTE, word);
		*i += ft_strlen(word) + 2;
		free(word);
	}
	else if (input[*i] == '\"')
	{
		word = add_word_inside_quote(input[*i], input + (*i + 1));
		add_token(tokens, last, TOKEN_DOUBLE_QUOTE, word);
		*i += ft_strlen(word) + 2;
		free(word);
	}
}

void	handle_word(char *input, int *i, t_token **tokens, t_token **last)
{
	char	*word;

	word = add_word(input + *i);
	add_token(tokens, last, TOKEN_WORD, word);
	*i += ft_strlen(word);
	free(word);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 17:04:31 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/24 15:00:57 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	malloc_error(void)
{
	printf("malloc Error !\n");
	exit(EXIT_FAILURE);
}

void	add_token(t_token **tokens, t_token **last, t_token_type type,
		const char *value)
{
	t_token	*new_token;

	new_token = malloc(sizeof(t_token));
	if (!new_token)
		malloc_error();
	new_token->type = type;
	new_token->value = ft_strdup(value);
	new_token->next = NULL;
	if (!*tokens)
	{
		*tokens = new_token;
		*last = new_token;
	}
	else
	{
		(*last)->next = new_token;
		*last = new_token;
	}
}

// char	*expand_env(char *input)
// {
// 	char	*env_name;
// 	char	*env_value;
// 	int		i;

// 	i = 0;
// 	while (input[i])
// 	{
// 		// if (input[i] == '$' && input[i + 1] == '?')
// 		// {
// 		// 	env_value = ft_itoa(exit_status);
// 		// }
// 		// else
// 		if (input[i] == '$' && ((ft_isalpha(input[i + 1]) || input[i
// 					+ 1] == '_')))
// 		{
// 			env_name = extract_env(input + 1);
// 		}
// 	}
// }

char	*extract_env(char *input)
{
	int		i;
	int		l;
	char	*name;

	i = 0;
	l = 0;
	while (input[l] && (ft_isalnum(input[l]) || input[l] == '_'))
		l++;
	name = malloc(l + 1);
	if (!name)
		malloc_error();
	while (i < l)
	{
		name[i] = input[i];
		i++;
	}
	name[i] = '\0';
	return (name);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_fun1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/27 20:34:34 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 15:58:27 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	arg_size(t_token *tokens)
{
	t_token	*tmp;
	int		size;

	size = 0;
	tmp = tokens;
	while (tmp)
	{
		if (tmp->type == 1 || tmp->type == 9)
			break ;
		else if (tmp->type == 3 || tmp->type == 4 || tmp->type == 5
			|| tmp->type == 6)
			tmp = tmp->next->next->next;
		else if (tmp->type == 2)
			tmp = tmp->next;
		else
		{
			size++;
			tmp = tmp->next;
		}
	}
	return (size);
}

static void	add_file_to_cmd(t_cmd *tmp, t_token **tokens, int type, int *flag)
{
	if ((*tokens)->next->type == 1)
		*tokens = (*tokens)->next;
	while ((*tokens)->next->type == 2)
		*tokens = (*tokens)->next;
	if ((*tokens)->next && (*tokens)->next->type != 9)
	{
		if (!(*flag))
		{
			*flag = 1;
			tmp->file = add_newfile(ft_strdup((*tokens)->next->value), type);
		}
		else
			add_backfile(&tmp->file,
				add_newfile(ft_strdup((*tokens)->next->value), type));
		*tokens = (*tokens)->next->next;
	}
	else
		*tokens = (*tokens)->next;
}

static void	add_arg_to_cmd(t_cmd *tmp, t_token **tokens, int *i)
{
	if (!tmp->cmd)
	{
		tmp->cmd = ft_strdup((*tokens)->value);
		*tokens = (*tokens)->next;
	}
	else if ((*tokens)->type != 2 && (*tokens)->type != 9)
	{
		tmp->args[*i] = ft_strdup((*tokens)->value);
		(*i)++;
	}
	*tokens = (*tokens)->next;
}

static void	handle_pipe(t_cmd **tmp, t_token **tokens, int *i, int *flag)
{
	*flag = 0;
	*i = 0;
	*tokens = (*tokens)->next;
	while ((*tokens)->type == 2)
		*tokens = (*tokens)->next;
	(*tmp)->next = add_new(arg_size(*tokens));
	*tmp = (*tmp)->next;
}

void	init_cmd(t_cmd **cmd, t_token *tokens)
{
	t_cmd	*tmp;
	int		i;
	int		flag;
	int		type;

	flag = 0;
	i = 0;
	type = 0;
	*cmd = add_new(arg_size(tokens));
	tmp = *cmd;
	while (tokens && tokens->type != 9)
	{
		if (tokens->type == 2)
			tokens = tokens->next;
		else if (tokens->type == 1)
			handle_pipe(&tmp, &tokens, &i, &flag);
		else if (tokens->type == 3 || tokens->type == 4 || tokens->type == 5
			|| tokens->type == 6)
		{
			type = tokens->type;
			add_file_to_cmd(tmp, &tokens, type, &flag);
		}
		else
			add_arg_to_cmd(tmp, &tokens, &i);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_fun.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 16:46:02 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 17:19:57 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_tokenize_state	tokenize_state_init(int *i, t_token **tokens,
		t_token **last)
{
	t_tokenize_state	state;

	state.i = i;
	state.tokens = tokens;
	state.last = last;
	return (state);
}

t_env	*env_init(char **env)
{
	t_env	*new_env;
	t_env	*last;
	t_env	*new_node;
	int		i;

	new_env = NULL;
	last = NULL;
	if (!env || !*env)
		return (NULL);
	new_env = ft_lstnew(extract_var(env[0]), extract_value(env[0]));
	if (!new_env)
		return (NULL);
	last = new_env;
	i = 1;
	while (env[i])
	{
		new_node = ft_lstnew(extract_var(env[i]), extract_value(env[i]));
		if (!new_node)
			return (NULL);
		ft_lstadd_back(&last, new_node);
		last = last->next;
		i++;
	}
	return (new_env);
}

void	init_command(t_command **cmd, t_token *tokens, t_env **env)
{
	if (!*cmd)
	{
		*cmd = malloc(sizeof(t_command));
		if (!*cmd)
			malloc_error();
	}
	(*cmd)->env = *env;
	init_cmd(&(*cmd)->cmd, tokens);
}
NAME = minishell
CC = cc
CFLAGS = -Wall -Wextra -Werror -fsanitize=address

SRCS = minishell.c ./utils/ft_strcpy.c ./utils/ft_strncpy.c ./utils/ft_substr.c ./utils/ft_lstadd_back.c ./utils/add_new.c ./utils/add_newfile.c ./init/init_fun.c ./init/init_fun1.c\
		./token/helper.c ./token/helper1.c ./token/helper2.c ./token/helper3.c ./token/helper4.c ./token/helper5.c ./token/helper6.c ./token/tokeniser.c ./parser/parser.c ./parser/parser1.c\
 		./utils/ft_strlen.c ./utils/ft_strdup.c ./utils/ft_isalnum.c ./utils/ft_isalpha.c ./utils/ft_isdigit.c ./utils/ft_lstnew.c ./utils/ft_strcmp.c ./utils/ft_strjoin.c ./utils/add_backfile.c\

OBJS = $(SRCS:.c=.o)

all: $(NAME)

$(NAME): $(OBJS) minishell.h
	$(CC) $(CFLAGS) -o $(NAME) $(OBJS) -lreadline

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: clean
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/10 12:09:50 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:07:11 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

int	error_fun(void)
{
	printf("Error: Unclosed quotes!\n");
	return (0);
}

void	malloc_error(void)
{
	printf("malloc Error !\n");
	exit(EXIT_FAILURE);
}

int	main(int ac, char **av, char **env)
{
	int			flag;
	char		*line;
	t_command	cmd;
	t_env		*new_env;

	(void)av;
	(void)ac;
	new_env = env_init(env);
	while (07)
	{
		line = readline("minishell :");
		if (!line)
			return (free_env(new_env), free(line), 2);
		check_unprint(&line);
		flag = check_quotes(line);
		if (flag)
			tokeniser(line, new_env, &cmd);
		free(line);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/10 12:13:29 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:07:47 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MINISHELL_H
# define MINISHELL_H

# include <readline/readline.h>
# include <stdio.h>
# include <stdlib.h>

typedef enum e_token_type
{
	TOKEN_WORD,
	TOKEN_PIPE,
	TOKEN_SPACE,
	TOKEN_APPEND,
	TOKEN_HEREDOC,
	TOKEN_REDIR_IN,
	TOKEN_REDIR_OUT,
	TOKEN_SINGLE_QUOTE,
	TOKEN_DOUBLE_QUOTE,
	TOKEN_EOF,
}					t_token_type;

typedef struct s_file
{
	char			*name;
	int				type;
	struct s_file	*next;
}					t_file;

typedef struct s_cmd
{
	char			*cmd;
	char			**args;
	t_file			*file;
	struct s_cmd	*next;
}					t_cmd;

typedef struct s_env
{
	char			*var;
	char			*value;
	struct s_env	*next;
}					t_env;

typedef struct s_command
{
	t_env			*env;
	t_cmd			*cmd;
}					t_command;

typedef struct s_token
{
	t_token_type	type;
	char			*value;
	struct s_token	*next;
}					t_token;

typedef struct s_tokenize_state
{
	int				*i;
	t_token			**tokens;
	t_token			**last;
}					t_tokenize_state;

typedef struct s_exp_data
{
	int				i;
	int				in_sq;
	int				in_dq;
	t_env			*env;
	char			*expanded;
	int				flag;
}					t_exp_data;

int					error_fun(void);
int					ft_isdigit(int c);
int					ft_isalpha(int c);
int					ft_isalnum(int c);
void				malloc_error(void);
t_cmd				*add_new(int size);
void				free_env(t_env *env);
void				free_cmd(t_cmd *cmd);
char				*add_word(char *str);
t_env				*env_init(char **env);
void				free_file(t_file *file);
char				*extract_var(char *var);
int					check_quotes(char *line);
char				*ft_strdup(const char *s1);
int					ft_strlen(const char *str);
void				check_unprint(char **line);
char				*extract_value(char *value);
void				free_tokens(t_token *tokens);
int					skip_fun(char *line, int flag);
int					check_tokens(t_token **tokens);
int					skip_spaces(char *input, int *i);
int					process_exp_char(t_exp_data *data);
t_file				*add_newfile(void *name, int type);
t_env				*ft_lstnew(void *var, void *value);
char				*expand_env(char *input, t_env *env);
void				init_cmd(t_cmd **cmd, t_token *tokens);
void				check_and_join_token(t_token ***token);
void				add_backfile(t_file **lst, t_file *new);
void				ft_lstadd_back(t_env **lst, t_env *new);
char				*ft_strcpy(char *dest, const char *src);
int					ft_strcmp(const char *s1, const char *s2);
char				*add_word_inside_quote(char c, char *str);
void				handle_out_redirection(char *input, int *i,
						t_token **tokens, t_token **last);
void				add_token(t_token **tokens, t_token **last,
						t_token_type type, const char *value);
char				*ft_strjoin(char const *s1, char const *s2);
t_tokenize_state	tokenize_state_init(int *i, t_token **tokens,
						t_token **last);
char				*ft_substr(char const *s, int start, int len);
char				*ft_strncpy(char *dest, const char *src, int n);
int					check_red(char *input, t_tokenize_state *state);
int					check_pipe(char *input, t_tokenize_state *state);
void				handle_word(char *input, int *i, t_token **tokens,
						t_token **last);
void				tokeniser(char *input, t_env *env, t_command *cmd);
void				handle_quotes(char *input, int *i, t_token **tokens,
						t_token **last);
char				*extract_env(char *input, t_env *env, int dollar_pos,
						char *var_name);
char				*handle_env_expansion(char *input, int i, t_env *env);
void				handle_redirection(char *input, int *i, t_token **tokens,
						t_token **last);
void				handle_in_redirection(char *input, int *i, t_token **tokens,
						t_token **last);
void				init_command(t_command **cmd, t_token *tokens, t_env **env);

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser1.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 14:05:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/29 13:08:08 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	check_pipe(char *input, t_tokenize_state *state)
{
	int	i;
	int	l;

	l = 0;
	i = *state->i;
	while (input[i] == '|')
	{
		i++;
		l++;
		while (input[i] == ' ')
			i++;
	}
	if (l > 1)
		return (printf("syntax error near unexpected token `|'\n"), 0);
	while (input[i] == ' ')
		i++;
	if (l == 2 && input[i])
		return (3);
	else if (input[i])
		return (1);
	else
		return (printf("syntax error near unexpected token `|'\n"), 0);
	return (1);
}

static int	handle_redirection_chars(char *input, int *i, int *l)
{
	while (input[*i] == '>' || input[*i] == '<')
	{
		(*i)++;
		(*l)++;
		while (input[*i] == ' ')
		{
			(*i)++;
			if (input[*i] == '|')
				return (printf("syntax error near unexpected token `|'\n"), 0);
		}
		if (!input[*i])
			return (printf("syntax error\n"), 0);
		if (*l == 1 && input[*i - 1] == '>' && input[*i] == '|')
			return (1);
	}
	return (2);
}

int	check_red(char *input, t_tokenize_state *state)
{
	int	i;
	int	l;
	int	ret;

	l = 0;
	i = *state->i;
	if ((input[i] == '>' && input[i + 1] == '<') || (input[i] == '<' && input[i
				+ 1] == '>'))
		return (printf("syntax error\n"), 0);
	ret = handle_redirection_chars(input, &i, &l);
	if (ret != 2)
		return (ret);
	if (input[i] == '|')
		return (printf("syntax error near unexpected token `|'\n"), 0);
	if (l > 2)
		return (printf("syntax error\n"), 0);
	return (1);
}

void	check_and_join_token(t_token ***token)
{
	t_token	*tmp;
	t_token	*tmp2;

	tmp = **token;
	while (tmp)
	{
		if (tmp->next && tmp->type != 1 && tmp->next->type != 1
			&& tmp->next->type != 9 && tmp->type != 9 && tmp->next->type != 2
			&& tmp->type != 2 && tmp->next->type != 3 && tmp->type != 3
			&& tmp->next->type != 4 && tmp->type != 4 && tmp->next->type != 5
			&& tmp->type != 5 && tmp->next->type != 6 && tmp->type != 6)
		{
			tmp->value = ft_strjoin(tmp->value, tmp->next->value);
			tmp->type = 0;
			tmp2 = tmp->next;
			tmp->next = tmp2->next;
		}
		else
			tmp = tmp->next;
	}
}

int	check_tokens(t_token **tokens)
{
	t_token	*tmp;

	tmp = *tokens;
	if (tmp->type == 1)
		return (printf("syntax error near unexpected token `|'\n"), 0);
	while (tmp)
	{
		if ((tmp->type == 5 || tmp->type == 6 || tmp->type == 3
				|| tmp->type == 4) && tmp->next->type == 9)
			return (printf("syntax error\n"), 0);
		tmp = tmp->next;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 13:05:10 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/29 15:34:06 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	check_unprint(char **line)
{
	int	i;
	int	f;
	int	in_q;

	i = 0;
	f = 0;
	in_q = 0;
	while (line[0][f])
	{
		if (line[0][f] == '\'' || line[0][f] == '\"')
			in_q = !in_q;
		if (line[0][f] >= 1 && line[0][f] <= 31 && !in_q)
			f++;
		else
		{
			line[0][i] = line[0][f];
			f++;
			i++;
		}
	}
	line[0][i] = '\0';
}

// void	one_space(char **line)
// {
// 	int	i;
// 	int	f;
// 	int	flag;

// 	i = 0;
// 	f = 0;
// 	flag = 0;
// 	while (line[0][f])
// 	{
// 		while (line[0][f] == ' ')
// 		{
// 			flag = 1;
// 			f++;
// 		}
// 		if (flag)
// 		{
// 			line[0][i] = ' ';
// 			flag = 0;
// 			i++;
// 		}
// 		line[0][i] = line[0][f];
// 		f++;
// 		i++;
// 	}
// 	line[0][i] = '\0';
// }

int	skip_fun(char *line, int flag)
{
	int	i;

	i = 0;
	while (line[i])
	{
		if (flag == 1 && line[i] == '\'')
			return (i + 1);
		else if (flag == 2 && line[i] == '\"')
			return (i + 1);
		i++;
	}
	return (0);
}

int	check_quotes(char *line)
{
	int	i;
	int	j;
	int	f;

	i = 0;
	f = 0;
	while (line[i])
	{
		if ((line[i] == '\'' || line[i] == '\"') && !f)
		{
			f = 1;
			if (line[i] == '\"')
				f++;
			i++;
			j = skip_fun(line + i, f);
			if (j == 0)
				return (error_fun());
			f = 0;
			i += j;
		}
		else
			i++;
	}
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper1.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:31:53 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 17:24:52 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*extract_var(char *var)
{
	char	*new;
	int		i;
	int		l;

	i = 0;
	l = 0;
	while (var[l] != '=')
		l++;
	new = malloc(l + 1);
	if (!new)
		malloc_error();
	while (i < l)
	{
		new[i] = var[i];
		i++;
	}
	new[i] = '\0';
	return (new);
}

static int	ft_len(char *value)
{
	int	i;
	int	l;
	int	f;

	i = 0;
	l = 0;
	f = 0;
	while (value[i])
	{
		if (value[i] == '=' && !f)
		{
			i++;
			l = 0;
			f++;
		}
		l++;
		i++;
	}
	return (l);
}

static int	new_start(char *value)
{
	int	i;

	i = 0;
	while (value[i])
	{
		if (value[i] == '=')
			return (i + 1);
		i++;
	}
	return (0);
}

char	*extract_value(char *value)
{
	char	*new;
	int		i;
	int		l;

	i = 0;
	l = ft_len(value);
	new = malloc(l + 1);
	if (!new)
		malloc_error();
	i = 0;
	l = new_start(value);
	while (value[l])
	{
		new[i] = value[l];
		l++;
		i++;
	}
	new[i] = '\0';
	return (new);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper2.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/24 15:24:22 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 13:18:40 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	handle_in_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i + 1] == '<')
	{
		add_token(tokens, last, TOKEN_HEREDOC, "<<");
		*i += 2;
	}
	else
	{
		add_token(tokens, last, TOKEN_REDIR_IN, "<");
		(*i)++;
	}
}

void	handle_out_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i + 1] == '>')
	{
		add_token(tokens, last, TOKEN_APPEND, ">>");
		*i += 2;
	}
	else
	{
		add_token(tokens, last, TOKEN_REDIR_OUT, ">");
		(*i)++;
	}
}

void	handle_redirection(char *input, int *i, t_token **tokens,
		t_token **last)
{
	if (input[*i] == '<')
		handle_in_redirection(input, i, tokens, last);
	else if (input[*i] == '>')
		handle_out_redirection(input, i, tokens, last);
}

void	handle_quotes(char *input, int *i, t_token **tokens, t_token **last)
{
	char	*word;

	if (input[*i] == '\'')
	{
		word = add_word_inside_quote(input[*i], input + (*i + 1));
		add_token(tokens, last, TOKEN_SINGLE_QUOTE, word);
		*i += ft_strlen(word) + 2;
		free(word);
	}
	else if (input[*i] == '\"')
	{
		word = add_word_inside_quote(input[*i], input + (*i + 1));
		add_token(tokens, last, TOKEN_DOUBLE_QUOTE, word);
		*i += ft_strlen(word) + 2;
		free(word);
	}
}

void	handle_word(char *input, int *i, t_token **tokens, t_token **last)
{
	char	*word;

	word = add_word(input + *i);
	add_token(tokens, last, TOKEN_WORD, word);
	*i += ft_strlen(word);
	free(word);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper3.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 12:11:41 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 15:33:29 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static char	*create_expanded_str(char *input, char *env_value, int dollar_pos,
		int var_len)
{
	int		value_len;
	char	*new_input;

	value_len = 0;
	if (env_value)
		value_len = ft_strlen(env_value);
	new_input = malloc(ft_strlen(input) - (var_len + 1) + value_len + 1);
	if (!new_input)
		malloc_error();
	ft_strncpy(new_input, input, dollar_pos);
	new_input[dollar_pos] = '\0';
	if (env_value)
		ft_strcpy(new_input + dollar_pos, env_value);
	ft_strcpy(new_input + dollar_pos + value_len, input + dollar_pos + var_len
		+ 1);
	return (new_input);
}

char	*extract_env(char *input, t_env *env, int dollar_pos, char *var_name)
{
	t_env	*tmp;
	char	*env_value;
	int		var_len;

	tmp = env;
	var_len = ft_strlen(var_name);
	env_value = NULL;
	while (tmp)
	{
		if (!ft_strcmp(tmp->var, var_name))
		{
			env_value = tmp->value;
			break ;
		}
		tmp = tmp->next;
	}
	return (create_expanded_str(input, env_value, dollar_pos, var_len));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper4.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 14:23:07 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/26 19:53:01 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	skip_spaces(char *input, int *i)
{
	int	l;

	l = *i;
	while (input[l] && input[l] == ' ')
		l++;
	return (l);
}

char	*add_word(char *str)
{
	int		i;
	int		l;
	char	*ptr;

	i = 0;
	l = 0;
	while (str[l] && str[l] != '\'' && str[l] != '\"' && str[l] != ' '
		&& str[l] != '<' && str[l] != '>' && str[l] != '|')
		l++;
	ptr = malloc(l + 1);
	if (!ptr)
		malloc_error();
	while (i < l)
	{
		ptr[i] = str[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}

char	*add_word_inside_quote(char c, char *str)
{
	int		l;
	int		i;
	char	*ptr;

	i = 0;
	l = 0;
	while (str[l] && str[l] != c)
		l++;
	ptr = malloc(l + 1);
	if (!ptr)
		malloc_error();
	while (i < l)
	{
		ptr[i] = str[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper5.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 17:20:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 17:25:00 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	free_tokens(t_token *tokens)
{
	t_token	*tmp;

	while (tokens)
	{
		tmp = tokens;
		tokens = tokens->next;
		free(tmp->value);
		free(tmp);
	}
}

void	free_file(t_file *file)
{
	t_file	*tmp;

	while (file)
	{
		tmp = file;
		file = file->next;
		free(tmp->name);
		free(tmp);
	}
}

void	free_env(t_env *env)
{
	t_env	*tmp;

	while (env)
	{
		tmp = env;
		env = env->next;
		free(tmp->var);
		free(tmp->value);
		free(tmp);
	}
}

void	free_cmd(t_cmd *cmd)
{
	t_cmd	*tmp;
	int		i;

	i = 0;
	while (cmd)
	{
		i = 0;
		tmp = cmd;
		cmd = cmd->next;
		while (tmp->args[i])
		{
			free(tmp->args[i]);
			i++;
		}
		free(tmp->args);
		free(tmp->cmd);
		free_file(tmp->file);
		free(tmp);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper6.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 16:33:04 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/01 19:21:02 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	handle_redirections(t_exp_data *data)
{
	if (data->expanded[data->i] == '<' && data->expanded[data->i + 1] == '<')
	{
		data->i++;
		data->flag = 1;
		if (data->expanded[data->i + 1])
		{
			data->i++;
			while (data->expanded[data->i] == ' ')
				data->i++;
		}
		return (1);
	}
	return (0);
}

static int	handle_quote(t_exp_data *data)
{
	if (data->expanded[data->i] == '\'' && !data->in_dq)
	{
		data->in_sq = !data->in_sq;
		return (1);
	}
	else if (data->expanded[data->i] == '\"' && !data->in_sq)
	{
		data->in_dq = !data->in_dq;
		return (1);
	}
	return (0);
}

int	process_exp_char(t_exp_data *data)
{
	char	*temp;

	if (handle_redirections(data))
		return (0);
	else if (handle_quote(data))
		return (0);
	else if (data->expanded[data->i] == '$' && !data->in_sq && !data->flag)
	{
		temp = handle_env_expansion(data->expanded, data->i, data->env);
		if (temp)
		{
			free(data->expanded);
			data->expanded = temp;
			data->i = 0;
			if (data->in_dq)
				data->in_dq = !data->in_dq;
			return (1);
		}
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   helper.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 17:04:31 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/01 19:20:55 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	add_token(t_token **tokens, t_token **last, t_token_type type,
		const char *value)
{
	t_token	*new_token;

	new_token = malloc(sizeof(t_token));
	if (!new_token)
		malloc_error();
	new_token->type = type;
	new_token->value = ft_strdup(value);
	new_token->next = NULL;
	if (!*tokens)
	{
		*tokens = new_token;
		*last = new_token;
	}
	else
	{
		(*last)->next = new_token;
		*last = new_token;
	}
}

static int	handle_dollar(char *input)
{
	int	i;
	int	l;

	i = 0;
	l = 0;
	if (ft_isalpha(input[1]) || input[1] == '_')
	{
		i++;
		while (input[i] && (ft_isalnum(input[i]) || input[i] == '_'))
		{
			l++;
			i++;
		}
	}
	return (l);
}

char	*handle_env_expansion(char *input, int i, t_env *env)
{
	int		l;
	char	*result;
	char	*var_name;

	l = handle_dollar(input + i);
	if (l > 0)
	{
		var_name = ft_substr(input, i + 1, l);
		if (!var_name)
			return (NULL);
		result = extract_env(input, env, i, var_name);
		free(var_name);
		return (result);
	}
	return (NULL);
}

static void	init_exp_data(t_exp_data *data, char *input, t_env *env)
{
	data->i = 0;
	data->in_sq = 0;
	data->in_dq = 0;
	data->env = env;
	data->flag = 0;
	data->expanded = ft_strdup(input);
}

char	*expand_env(char *input, t_env *env)
{
	t_exp_data	data;

	if (!input)
		return (NULL);
	init_exp_data(&data, input, env);
	if (!data.expanded)
		return (NULL);
	while (data.expanded[data.i])
	{
		if (process_exp_char(&data))
			continue ;
		data.i++;
	}
	return (data.expanded);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tokeniser.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 16:03:38 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:03:00 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	handle_token(char c, char *input, t_tokenize_state *state)
{
	if (c == ' ')
	{
		add_token(state->tokens, state->last, TOKEN_SPACE, " ");
		(*state->i) = skip_spaces(input, state->i);
	}
	else if (c == '|')
	{
		if (!check_pipe(input, state))
			return (0);
		else if (check_pipe(input, state) == 3)
			(*state->i)++;
		add_token(state->tokens, state->last, TOKEN_PIPE, "|");
		(*state->i)++;
	}
	else if (c == '<' || c == '>')
	{
		if (!check_red(input, state))
			return (0);
		handle_redirection(input, state->i, state->tokens, state->last);
	}
	else if (c == '\'' || c == '\"')
		handle_quotes(input, state->i, state->tokens, state->last);
	else
		handle_word(input, state->i, state->tokens, state->last);
	return (1);
}

static int	process_tokens(char *input, t_tokenize_state *state)
{
	while (input[*state->i])
	{
		if (!handle_token(input[*state->i], input, state))
			return (0);
	}
	return (1);
}

static void	finalize_tokens(t_token **tokens, t_token **last)
{
	add_token(tokens, last, TOKEN_EOF, "EOF");
	if (!check_tokens(tokens))
	{
		free_tokens(*tokens);
		*tokens = NULL;
		return ;
	}
	check_and_join_token(&tokens);
}
// static void	print_command(t_command *cmd)
// {
// 	t_command	*tmp;
// 	int			i;

// 	i = 0;
// 	tmp = cmd;
// 	while (tmp->cmd)
// 	{
// 		i = 0;
// 		printf("cmd : %s\n", tmp->cmd->cmd);
// 		printf("args : ");
// 		while (tmp->cmd->args[i])
// 		{
// 			printf("[%s] ", tmp->cmd->args[i]);
// 			i++;
// 		}
// 		printf("\n");
// 		if (tmp->cmd->file)
// 		{
// 			while (tmp->cmd->file)
// 			{
// 				printf("file : %s type : %d\n", tmp->cmd->file->name,
// 					tmp->cmd->file->type);
// 				tmp->cmd->file = tmp->cmd->file->next;
// 			}
// 		}
// 		tmp->cmd = tmp->cmd->next;
// 	}
// }

void	tokeniser(char *input, t_env *env, t_command *cmd)
{
	int					i;
	t_token				*tokens;
	t_token				*last;
	t_tokenize_state	state;
	char				*new_input;

	i = 0;
	new_input = expand_env(input, env);
	last = NULL;
	tokens = NULL;
	state = tokenize_state_init(&i, &tokens, &last);
	if (!new_input)
		return ;
	if (!process_tokens(new_input, &state))
	{
		free_tokens(tokens);
		free(new_input);
		return ;
	}
	finalize_tokens(&tokens, &last);
	init_command(&cmd, tokens, &env);
	free_tokens(tokens);
	free_cmd(cmd->cmd);
	free(new_input);
}
	// print_command(cmd);
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tokeniser.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 16:03:38 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/24 15:37:13 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

char	*add_word(char *str)
{
	int		i;
	int		l;
	char	*ptr;

	i = 0;
	l = 0;
	while (str[l] && str[l] != ' ' && str[l] != '<' && str[l] != '>')
		l++;
	ptr = malloc(l + 1);
	if (!ptr)
		malloc_error();
	while (i < l)
	{
		ptr[i] = str[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}

char	*add_word_inside_quote(char c, char *str)
{
	int		l;
	int		i;
	char	*ptr;

	i = 0;
	l = 0;
	while (str[l] && str[l] != c)
		l++;
	ptr = malloc(l + 1);
	if (!ptr)
		malloc_error();
	while (i < l)
	{
		ptr[i] = str[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}

static void	handle_token(char c, char *input, t_tokenize_state *state)
{
	if (c == ' ')
		(*state->i)++;
	else if (c == '|')
	{
		add_token(state->tokens, state->last, TOKEN_PIPE, "|");
		(*state->i)++;
	}
	else if (c == '<' || c == '>')
		handle_redirection(input, state->i, state->tokens, state->last);
	else if (c == '\'' || c == '\"')
		handle_quotes(input, state->i, state->tokens, state->last);
	else
		handle_word(input, state->i, state->tokens, state->last);
}

t_token	*tokeniser(char *input, t_env *env)
{
	int					i;
	t_token				*tokens;
	t_token				*last;
	t_tokenize_state	state;

	i = 0;
	(void)env;
	last = NULL;
	tokens = NULL;
	state.i = &i;
	state.tokens = &tokens;
	state.last = &last;
	if (!input)
		return (NULL);
	while (input[i])
		handle_token(input[i], input, &state);
	add_token(&tokens, &last, TOKEN_EOF, "EOF");
	return (tokens);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_backfile.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 14:33:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/29 14:35:12 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static t_file	*ft_lstlast(t_file *lst)
{
	t_file	*current;

	if (!lst)
		return (NULL);
	current = lst;
	while (current->next != NULL)
	{
		current = current->next;
	}
	return (current);
}

void	add_backfile(t_file **lst, t_file *new)
{
	t_file	*last;

	if (!lst || !new)
		return ;
	if (!*lst)
	{
		(*lst) = new;
		return ;
	}
	last = ft_lstlast(*lst);
	last->next = new;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_new.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 11:28:24 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 15:51:58 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_cmd	*add_new(int size)
{
	t_cmd	*tmp;

	tmp = malloc(sizeof(t_cmd));
	if (!tmp)
		malloc_error();
	tmp->args = calloc(size + 1, sizeof(char *));
	if (!tmp->args)
		malloc_error();
	tmp->next = NULL;
	tmp->cmd = NULL;
	tmp->file = NULL;
	return (tmp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   add_newfile.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 11:29:04 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/28 11:32:55 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_file	*add_newfile(void *name, int type)
{
	t_file	*tmp;

	tmp = malloc(sizeof(t_file));
	if (!tmp)
		malloc_error();
	tmp->name = name;
	tmp->type = type;
	tmp->next = NULL;
	return (tmp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 19:58:51 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 20:42:16 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_isalnum(int c)
{
	if ((ft_isalpha(c)) || ft_isdigit(c))
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 20:01:12 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 20:42:23 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 20:02:01 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:31:55 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/22 20:16:43 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 20:42:27 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	ft_len(int n)
{
	int	i;

	i = 0;
	if (n < 0)
	{
		i += 1;
		n *= -1;
	}
	while (n > 0)
	{
		n /= 10;
		i++;
	}
	return (i);
}

char	*ft_itoa(int n)
{
	char	*str;
	int		len;
	int		i;

	if (n == -2147483648)
		return (ft_strdup("-2147483648"));
	if (n == 0)
		return (ft_strdup("0"));
	len = ft_len(n);
	i = len;
	str = malloc((len + 1) * sizeof(char));
	if (!str)
		return (NULL);
	if (n < 0)
	{
		n *= -1;
		str[0] = '-';
	}
	while (n > 0)
	{
		str[i - 1] = (n % 10) + 48;
		n /= 10;
		i--;
	}
	return (str[len] = '\0', str);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:21:09 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/23 12:22:35 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static t_env	*ft_lstlast(t_env *lst)
{
	t_env	*current;

	if (!lst)
		return (NULL);
	current = lst;
	while (current->next != NULL)
	{
		current = current->next;
	}
	return (current);
}

void	ft_lstadd_back(t_env **lst, t_env *new)
{
	t_env	*last;

	if (!lst || !new)
		return ;
	if (!*lst)
	{
		(*lst) = new;
		return ;
	}
	last = ft_lstlast(*lst);
	last->next = new;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/23 12:17:24 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/23 12:19:50 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_env	*ft_lstnew(void *var, void *value)
{
	t_env	*ptr;

	ptr = malloc(sizeof(t_env));
	if (!ptr)
		malloc_error();
	ptr->var = var;
	ptr->value = value;
	ptr->next = NULL;
	return (ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/10 12:16:39 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/10 12:18:03 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	count_word(const char *str, char c)
{
	int	i;
	int	res;

	i = 0;
	res = 0;
	while (str && str[i])
	{
		while (str[i] == c)
			i++;
		if (str[i])
			res++;
		while (str[i] && str[i] != c)
			i++;
	}
	return (res);
}

static int	len(const char *str, char c, int i)
{
	int	j;

	j = 0;
	while (str[i] && str[i] != c)
	{
		j++;
		i++;
	}
	return (j);
}

static char	*ft_strncpy(char *dest, const char *src, int n)
{
	int	i;

	i = 0;
	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

static void	free_2d_arr(char **ptr)
{
	int	i;

	i = 0;
	while (ptr[i])
		free(ptr[i++]);
}

char	**ft_split(char const *s, char c)
{
	char	**ptr;
	int		l;
	int		i;
	int		j;

	i = 0;
	l = 0;
	j = 0;
	if (!s)
		return (NULL);
	ptr = malloc((count_word(s, c) + 1) * sizeof(char *));
	if (!ptr)
		return (NULL);
	while (ptr && i < count_word(s, c))
	{
		j += l;
		while (s[j] == c)
			j++;
		l = len(s, c, j);
		ptr[i] = malloc((l + 1) * sizeof(char));
		if (!ptr[i])
			return (free_2d_arr(ptr), free(ptr), NULL);
		ft_strncpy(ptr[i++], s + j, l);
	}
	return (ptr[i] = NULL, ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 13:00:34 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 13:01:09 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_strcmp(const char *s1, const char *s2)
{
	size_t			i;
	unsigned char	*str1;
	unsigned char	*str2;

	str1 = (unsigned char *)s1;
	str2 = (unsigned char *)s2;
	i = 0;
	while (str1[i] || str2[i])
	{
		if (str1[i] < str2[i])
			return (-1);
		else if (str1[i] > str2[i])
			return (1);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 13:05:45 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 13:20:54 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strcpy(char *dest, const char *src)
{
	int	i;

	i = 0;
	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 17:15:13 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/22 13:02:50 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strdup(const char *s1)
{
	int		i;
	int		l;
	char	*ptr;

	i = 0;
	l = ft_strlen(s1);
	ptr = malloc((l + 1) * sizeof(char));
	if (!ptr)
		return (NULL);
	i = 0;
	while (s1[i])
	{
		ptr[i] = s1[i];
		i++;
	}
	ptr[i] = '\0';
	return (ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 17:42:54 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/27 17:46:54 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static char	*ft_strcat(char *str, char const *s2, size_t start, size_t l)
{
	size_t	i;

	i = 0;
	while (l > start)
	{
		str[start] = s2[i];
		i++;
		start++;
	}
	str[start] = '\0';
	return (str);
}

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*str;
	int		l;
	int		i;

	if (!s1 || !s2)
		return (NULL);
	l = ft_strlen(s1) + ft_strlen(s2);
	str = malloc((l + 1) * sizeof(char));
	if (!str)
		return (NULL);
	i = 0;
	while (i < ft_strlen(s1))
	{
		str[i] = s1[i];
		i++;
	}
	return (ft_strcat(str, s2, i, l));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/12 12:30:44 by aychikhi          #+#    #+#             */
/*   Updated: 2025/05/08 16:07:57 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	ft_strlen(const char	*str)
{
	int	i;

	i = 0;
	while (str && str[i])
		i++;
	return (i);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 15:33:34 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 15:33:50 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_strncpy(char *dest, const char *src, int n)
{
	int	i;

	i = 0;
	while (src[i] && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aychikhi <aychikhi@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/25 12:06:11 by aychikhi          #+#    #+#             */
/*   Updated: 2025/04/25 12:10:33 by aychikhi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*ft_substr(char const *s, int start, int len)
{
	char	*str;
	int		i;

	if (!s)
		return (NULL);
	if (start > ft_strlen(s))
		return (ft_strdup(""));
	if (ft_strlen(s) - start < len)
		len = ft_strlen(s) - start;
	str = malloc((len + 1) * sizeof(char));
	if (!str)
		return (NULL);
	i = 0;
	while (i < len)
	{
		str[i] = s[start];
		start++;
		i++;
	}
	str[len] = '\0';
	return (str);
}
